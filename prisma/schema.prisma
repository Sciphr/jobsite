// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  password  String?
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Admin fields
  role            String  @default("user") // "user", "admin", "hr", "super_admin"
  privilegeLevel  Int     @default(0)     // 0 = regular user, 1 = HR (applications only), 2 = admin (jobs + applications), 3 = super admin (everything)
  isActive        Boolean @default(true)  // Allow deactivating admin accounts
  
  // Relations
  applications Application[]
  savedJobs    SavedJob[]
  resumes      UserResume[]
  
  // Admin relations
  createdJobs  Job[]        @relation("JobCreator")
  
  @@map("users")
}

// Remove AdminUser model entirely and update Job model
model Category {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String @unique
  description String?
  
  // Relations
  jobs Job[]
  
  @@map("categories")
}

model Job {
  id                        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                     String
  slug                      String   @unique
  description               String
  summary                   String?
  department                String
  employmentType           String   // "Full-time", "Part-time", "Contract", "Internship"
  experienceLevel          String   // "Entry", "Mid", "Senior", "Executive"
  location                  String
  remotePolicy             String   // "Remote", "Hybrid", "On-site"
  
  salaryMin                Int?
  salaryMax                Int?
  salaryCurrency           String   @default("USD")
  salaryType               String   @default("Annual")
  benefits                  String?
  
  requirements              String
  preferredQualifications  String?
  educationRequired        String?
  yearsExperienceRequired  Int?
  
  applicationDeadline      DateTime?
  startDate               DateTime?
  applicationInstructions  String?
  
  status                   String   @default("Draft") // "Active", "Paused", "Closed", "Draft"
  featured                 Boolean  @default(false)
  priority                 Int      @default(0)
  viewCount               Int      @default(0)
  applicationCount        Int      @default(0)
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  postedAt                DateTime?
  
  // Foreign Keys
  categoryId              String   @db.Uuid
  createdBy               String   @db.Uuid
  
  // Relations
  category                Category      @relation(fields: [categoryId], references: [id])
  creator                 User          @relation("JobCreator", fields: [createdBy], references: [id])
  applications            Application[]
  savedJobs               SavedJob[]
  
  @@map("jobs")
}

model Application {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status      String   @default("Applied") // "Applied", "Reviewing", "Interview", "Rejected", "Hired"
  coverLetter String?
  resumeUrl   String?
  notes       String?
  appliedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // New fields for applicant info
  name        String?
  email       String?
  phone       String?

  // Foreign Keys
  userId      String?  @db.Uuid // made optional for guests
  jobId       String   @db.Uuid

  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  job         Job      @relation(fields: [jobId], references: [id])

  // Ensure one application per user per job (only for signed-in users)
  @@unique([userId, jobId])
  @@map("applications")
}

model SavedJob {
  id        String   @id @default(dbgenerated("gen_random_uuid")) @db.Uuid
  savedAt   DateTime @default(now())
  
  // Foreign Keys
  userId    String   @db.Uuid
  jobId     String   @db.Uuid
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])
  
  // Ensure one save per user per job
  @@unique([userId, jobId])
  @@map("saved_jobs")
}

model UserResume {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  fileName    String   @map("file_name") @db.VarChar(255)
  fileSize    Int      @map("file_size")
  fileType    String   @map("file_type") @db.VarChar(50)
  storagePath String   @map("storage_path") @db.VarChar(500)
  isDefault   Boolean  @default(false) @map("is_default")
  uploadedAt  DateTime @default(now()) @map("uploaded_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_resumes_user_id")
  @@index([userId, isDefault], map: "idx_user_resumes_default")
  @@map("user_resumes")
}