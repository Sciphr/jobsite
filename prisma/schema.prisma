generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String                       @unique
  password                        String?
  firstName                       String?
  lastName                        String?
  phone                           String?
  createdAt                       DateTime                     @default(now())
  updatedAt                       DateTime                     @updatedAt
  role                            String?                      @default("user") @db.VarChar
  privilegeLevel                  Int?                         @default(0)
  isActive                        Boolean?                     @default(true)
  privilege_level                 Int?                         @default(0)
  is_active                       Boolean?                     @default(true)
  googleAccessToken               String?                      @map("google_access_token")
  googleRefreshToken              String?                      @map("google_refresh_token")
  googleTokenExpiresAt            DateTime?                    @map("google_token_expires_at") @db.Timestamp(6)
  googleCalendarId                String?                      @default("primary") @map("google_calendar_id") @db.VarChar(255)
  googleEmail                     String?                      @map("google_email") @db.VarChar(255)
  calendarIntegrationEnabled      Boolean?                     @default(false) @map("calendar_integration_enabled")
  calendarIntegrationConnectedAt  DateTime?                    @map("calendar_integration_connected_at") @db.Timestamp(6)
  calendarTimezone                String?                      @default("America/Toronto") @map("calendar_timezone") @db.VarChar(100)
  zoomAccessToken                 String?                      @map("zoom_access_token") @db.VarChar(500)
  zoomRefreshToken                String?                      @map("zoom_refresh_token") @db.VarChar(500)
  zoomTokenExpiresAt              DateTime?                    @map("zoom_token_expires_at") @db.Timestamp(6)
  zoomUserId                      String?                      @map("zoom_user_id") @db.VarChar(255)
  zoomEmail                       String?                      @map("zoom_email") @db.VarChar(255)
  zoomIntegrationEnabled          Boolean?                     @default(false) @map("zoom_integration_enabled")
  zoomIntegrationConnectedAt      DateTime?                    @map("zoom_integration_connected_at") @db.Timestamp(6)
  microsoftAccessToken            String?                      @map("microsoft_access_token")
  microsoftRefreshToken           String?                      @map("microsoft_refresh_token")
  microsoftTokenExpiresAt         DateTime?                    @map("microsoft_token_expires_at") @db.Timestamp(6)
  microsoftUserId                 String?                      @map("microsoft_user_id") @db.VarChar(255)
  microsoftEmail                  String?                      @map("microsoft_email") @db.VarChar(255)
  microsoftTenantId               String?                      @map("microsoft_tenant_id") @db.VarChar(255)
  microsoftIntegrationEnabled     Boolean?                     @default(false) @map("microsoft_integration_enabled")
  microsoftIntegrationConnectedAt DateTime?                    @map("microsoft_integration_connected_at") @db.Timestamp(6)
  applications                    Application[]
  auditLogsAsActor                AuditLog[]                   @relation("AuditLogActor")
  auditLogsAsRelatedUser          AuditLog[]                   @relation("AuditLogRelatedUser")
  email_automation_rules          EmailAutomationRule[]
  email_campaigns                 EmailCampaign[]
  email_templates                 EmailTemplate[]
  emails                          Email[]
  reviewedRescheduleRequests      InterviewRescheduleRequest[]
  createdInterviews               Interview[]                  @relation("InterviewCreator")
  conductedInterviews             Interview[]                  @relation("InterviewConductor")
  createdJobs                     Job[]                        @relation("JobCreator")
  savedJobs                       SavedJob[]
  settings                        Setting[]
  resumes                         UserResume[]

  @@map("users")
}

model Category {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @unique
  description String?
  jobs        Job[]

  @@map("categories")
}

model Job {
  id                      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                   String
  slug                    String          @unique
  description             String
  summary                 String?
  department              String
  employmentType          String
  experienceLevel         String
  location                String
  remotePolicy            String
  salaryMin               Int?
  salaryMax               Int?
  salaryCurrency          String          @default("USD")
  salaryType              String          @default("Annual")
  benefits                String?
  requirements            String
  preferredQualifications String?
  educationRequired       String?
  yearsExperienceRequired Int?
  applicationDeadline     DateTime?
  startDate               DateTime?
  applicationInstructions String?
  status                  String          @default("Draft")
  featured                Boolean         @default(false)
  priority                Int             @default(0)
  viewCount               Int             @default(0)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  postedAt                DateTime?
  categoryId              String          @db.Uuid
  createdBy               String?         @db.Uuid
  autoExpiresAt           DateTime?
  lastExpiredCheck        DateTime?
  showSalary              Boolean         @default(true)
  auto_expires_at         DateTime?       @db.Timestamp(6)
  last_expired_check      DateTime?       @db.Timestamp(6)
  applicationCount        Int?            @default(0)
  applications            Application[]
  auditLogs               AuditLog[]      @relation("AuditLogRelatedJob")
  email_campaigns         EmailCampaign[]
  emails                  Email[]
  interviews              Interview[]
  category                Category        @relation(fields: [categoryId], references: [id])
  creator                 User?           @relation("JobCreator", fields: [createdBy], references: [id])
  savedJobs               SavedJob[]

  @@map("jobs")
}

model Application {
  id                 String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status             String                       @default("Applied")
  coverLetter        String?
  resumeUrl          String?
  notes              String?
  appliedAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  userId             String?                      @db.Uuid
  jobId              String                       @db.Uuid
  name               String?
  email              String?
  phone              String?
  job                Job                          @relation(fields: [jobId], references: [id])
  user               User?                        @relation(fields: [userId], references: [id])
  auditLogs          AuditLog[]                   @relation("AuditLogRelatedApplication")
  emails             Email[]
  rescheduleRequests InterviewRescheduleRequest[]
  interviewTokens    InterviewToken[]
  interviews         Interview[]

  @@unique([userId, jobId])
  @@map("applications")
}

model ApplicationNote {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  applicationId     String   @map("application_id") @db.Uuid
  content           String
  type              String   @default("note") @db.VarChar(50)
  authorId          String?  @map("author_id") @db.Uuid
  authorName        String?  @map("author_name") @db.VarChar(255)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  metadata          Json?
  isSystemGenerated Boolean? @default(false) @map("is_system_generated")

  @@map("application_notes")
}

model SavedJob {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  savedAt DateTime @default(now())
  userId  String   @db.Uuid
  jobId   String   @db.Uuid
  job     Job      @relation(fields: [jobId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@unique([userId, jobId])
  @@map("saved_jobs")
}

model UserResume {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  fileName    String   @map("file_name") @db.VarChar(255)
  fileSize    Int      @map("file_size")
  fileType    String   @map("file_type") @db.VarChar(50)
  storagePath String   @map("storage_path") @db.VarChar(500)
  isDefault   Boolean  @default(false) @map("is_default")
  uploadedAt  DateTime @default(now()) @map("uploaded_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_resumes_user_id")
  @@index([userId, isDefault], map: "idx_user_resumes_default")
  @@map("user_resumes")
}

model Setting {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key            String
  value          String
  category       String
  userId         String?  @db.Uuid
  privilegeLevel Int      @default(0)
  dataType       String   @default("string")
  description    String?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([key, userId])
  @@map("settings")
}

model EmailTemplate {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @db.VarChar(255)
  subject      String
  content      String
  type         String    @db.VarChar(100)
  is_default   Boolean?  @default(false)
  is_active    Boolean?  @default(true)
  variables    String?
  description  String?
  created_by   String?   @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  category     String?   @db.VarChar(50)
  tags         String[]
  usage_count  Int?      @default(0)
  last_used_at DateTime? @db.Timestamp(6)
  users        User?     @relation(fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_email_templates_created_by")

  @@index([is_active], map: "idx_email_templates_is_active")
  @@index([type], map: "idx_email_templates_type")
  @@map("email_templates")
}

model Email {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject         String
  content         String
  html_content    String?
  recipient_email String         @db.VarChar(255)
  recipient_name  String?        @db.VarChar(255)
  application_id  String?        @db.Uuid
  job_id          String?        @db.Uuid
  template_id     String?        @db.Uuid
  email_provider  String?        @db.VarChar(100)
  message_id      String?        @db.VarChar(255)
  status          String?        @default("pending") @db.VarChar(50)
  failure_reason  String?
  opened_at       DateTime?      @db.Timestamp(6)
  clicked_at      DateTime?      @db.Timestamp(6)
  replied_at      DateTime?      @db.Timestamp(6)
  sent_by         String         @db.Uuid
  sent_at         DateTime?      @default(now()) @db.Timestamp(6)
  campaign_id     String?        @db.Uuid
  applications    Application?   @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  email_campaigns EmailCampaign? @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobs            Job?           @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           User           @relation(fields: [sent_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([application_id], map: "idx_emails_application_id")
  @@index([job_id], map: "idx_emails_job_id")
  @@index([sent_at], map: "idx_emails_sent_at")
  @@index([sent_by], map: "idx_emails_sent_by")
  @@index([status], map: "idx_emails_status")
  @@index([template_id], map: "idx_emails_template_id")
  @@map("emails")
}

model EmailCampaign {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String    @db.VarChar(255)
  subject          String
  content          String
  job_id           String?   @db.Uuid
  status           String?   @db.VarChar(50)
  filters          String?
  total_recipients Int?      @default(0)
  successful_sends Int?      @default(0)
  failed_sends     Int?      @default(0)
  created_by       String    @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  sent_at          DateTime? @db.Timestamp(6)
  users            User      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobs             Job?      @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emails           Email[]

  @@index([created_by], map: "idx_email_campaigns_created_by")
  @@index([job_id], map: "idx_email_campaigns_job_id")
  @@map("email_campaigns")
}

model CommunicationSetting {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String    @unique @db.VarChar(255)
  value       String
  category    String    @db.VarChar(100)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  @@map("communication_settings")
}

model EmailAutomationRule {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String    @db.VarChar(255)
  trigger        String    @db.VarChar(100)
  conditions     String
  template_id    String    @db.Uuid
  is_active      Boolean?  @default(true)
  created_by     String    @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  recipient_type String?   @default("applicant") @db.VarChar(50)
  users          User      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("email_automation_rules")
}

model AuditLog {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventType            String       @map("event_type") @db.VarChar(100)
  category             String       @db.VarChar(50)
  subcategory          String?      @db.VarChar(50)
  entityType           String?      @map("entity_type") @db.VarChar(50)
  entityId             String?      @map("entity_id") @db.Uuid
  entityName           String?      @map("entity_name") @db.VarChar(255)
  actorId              String?      @map("actor_id") @db.Uuid
  actorType            String       @default("user") @map("actor_type") @db.VarChar(20)
  actorName            String?      @map("actor_name") @db.VarChar(255)
  action               String       @db.VarChar(255)
  description          String?
  oldValues            Json?        @map("old_values")
  newValues            Json?        @map("new_values")
  changes              Json?
  ipAddress            String?      @map("ip_address") @db.VarChar(45)
  userAgent            String?      @map("user_agent") @db.VarChar(500)
  sessionId            String?      @map("session_id") @db.VarChar(255)
  requestId            String?      @map("request_id") @db.VarChar(255)
  relatedUserId        String?      @map("related_user_id") @db.Uuid
  relatedJobId         String?      @map("related_job_id") @db.Uuid
  relatedApplicationId String?      @map("related_application_id") @db.Uuid
  createdAt            DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  severity             String       @default("info") @db.VarChar(20)
  status               String       @default("success") @db.VarChar(20)
  tags                 String[]     @default([])
  metadata             Json?
  actor                User?        @relation("AuditLogActor", fields: [actorId], references: [id], onUpdate: NoAction, map: "fk_audit_logs_actor")
  relatedApplication   Application? @relation("AuditLogRelatedApplication", fields: [relatedApplicationId], references: [id], onUpdate: NoAction, map: "fk_audit_logs_related_application")
  relatedJob           Job?         @relation("AuditLogRelatedJob", fields: [relatedJobId], references: [id], onUpdate: NoAction, map: "fk_audit_logs_related_job")
  relatedUser          User?        @relation("AuditLogRelatedUser", fields: [relatedUserId], references: [id], onUpdate: NoAction, map: "fk_audit_logs_related_user")

  @@index([actorId], map: "idx_audit_logs_actor")
  @@index([category, createdAt], map: "idx_audit_logs_category_date")
  @@index([createdAt], map: "idx_audit_logs_created_at")
  @@index([entityType, entityId], map: "idx_audit_logs_entity")
  @@index([entityType, entityId, createdAt], map: "idx_audit_logs_entity_timeline")
  @@index([relatedApplicationId], map: "idx_audit_logs_related_application")
  @@index([relatedJobId], map: "idx_audit_logs_related_job")
  @@index([relatedUserId], map: "idx_audit_logs_related_user")
  @@map("audit_logs")
}

model Interview {
  id                     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  applicationId          String      @map("application_id") @db.Uuid
  interviewerId          String      @map("interviewer_id") @db.Uuid
  jobId                  String      @map("job_id") @db.Uuid
  type                   String      @db.VarChar(20)
  status                 String      @default("scheduled") @db.VarChar(20)
  durationMinutes        Int         @default(45) @map("duration_minutes")
  proposedTimeSlots      Json?       @map("proposed_time_slots")
  scheduledAt            DateTime?   @map("scheduled_at") @db.Timestamp(6)
  confirmedAt            DateTime?   @map("confirmed_at") @db.Timestamp(6)
  timezone               String      @default("America/Toronto") @db.VarChar(100)
  meetingLink            String?     @map("meeting_link")
  meetingLocation        String?     @map("meeting_location")
  agenda                 String?
  notes                  String?
  additionalInterviewers Json?       @map("additional_interviewers")
  googleCalendarEventId  String?     @map("google_calendar_event_id") @db.VarChar(255)
  calendarEventCreated   Boolean?    @default(false) @map("calendar_event_created")
  invitationSentAt       DateTime?   @map("invitation_sent_at") @db.Timestamp(6)
  reminderSentAt         DateTime?   @map("reminder_sent_at") @db.Timestamp(6)
  createdAt              DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt              DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  createdBy              String?     @map("created_by") @db.Uuid
  application            Application @relation(fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  creator                User?       @relation("InterviewCreator", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interviewer            User        @relation("InterviewConductor", fields: [interviewerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  job                    Job         @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([applicationId], map: "idx_interviews_application_id")
  @@index([interviewerId], map: "idx_interviews_interviewer_id")
  @@index([jobId], map: "idx_interviews_job_id")
  @@index([scheduledAt], map: "idx_interviews_scheduled_at")
  @@index([status], map: "idx_interviews_status")
  @@index([createdAt], map: "idx_interviews_created_at")
  @@map("interviews")
}

model InterviewToken {
  id                 String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  applicationId      String                       @map("application_id") @db.Uuid
  rescheduleToken    String                       @unique @map("reschedule_token") @db.VarChar(255)
  acceptanceToken    String                       @unique @map("acceptance_token") @db.VarChar(255)
  scheduledAt        DateTime                     @map("scheduled_at") @db.Timestamp(6)
  duration           Int                          @default(45)
  type               String                       @db.VarChar(50)
  interviewers       Json?                        @db.Json
  location           String?
  agenda             String?
  notes              String?
  calendarEventId    String?                      @map("calendar_event_id") @db.VarChar(255)
  status             String                       @default("pending") @db.VarChar(50)
  respondedAt        DateTime?                    @map("responded_at") @db.Timestamp(6)
  expiresAt          DateTime                     @map("expires_at") @db.Timestamp(6)
  createdAt          DateTime                     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime                     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  meetingLink        String?                      @map("meeting_link") @db.VarChar(500)
  meetingProvider    String?                      @default("google") @map("meeting_provider") @db.VarChar(50)
  rescheduleRequests InterviewRescheduleRequest[]
  application        Application                  @relation(fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_interview_tokens_application")

  @@index([applicationId], map: "idx_interview_tokens_application_id")
  @@index([rescheduleToken], map: "idx_interview_tokens_reschedule_token")
  @@index([acceptanceToken], map: "idx_interview_tokens_acceptance_token")
  @@index([status], map: "idx_interview_tokens_status")
  @@index([expiresAt], map: "idx_interview_tokens_expires_at")
  @@map("interview_tokens")
}

model InterviewRescheduleRequest {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  interviewTokenId String         @map("interview_token_id") @db.Uuid
  applicationId    String         @map("application_id") @db.Uuid
  responseType     String         @map("response_type") @db.VarChar(50)
  alternativeTimes Json?          @map("alternative_times") @db.Json
  writtenResponse  String?        @map("written_response")
  status           String         @default("pending") @db.VarChar(50)
  submittedAt      DateTime       @map("submitted_at") @db.Timestamp(6)
  reviewedAt       DateTime?      @map("reviewed_at") @db.Timestamp(6)
  reviewedBy       String?        @map("reviewed_by") @db.Uuid
  reviewNotes      String?        @map("review_notes")
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  application      Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_interview_reschedule_requests_application")
  reviewer         User?          @relation(fields: [reviewedBy], references: [id], onUpdate: NoAction, map: "fk_interview_reschedule_requests_reviewer")
  interviewToken   InterviewToken @relation(fields: [interviewTokenId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_interview_reschedule_requests_token")

  @@index([interviewTokenId], map: "idx_interview_reschedule_requests_token_id")
  @@index([applicationId], map: "idx_interview_reschedule_requests_application_id")
  @@index([status], map: "idx_interview_reschedule_requests_status")
  @@index([submittedAt], map: "idx_interview_reschedule_requests_submitted_at")
  @@map("interview_reschedule_requests")
}
