// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  password  String?
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Admin fields
  role            String  @default("user") // "user", "admin", "hr", "super_admin"
  privilegeLevel  Int     @default(0)     // 0 = regular user, 1 = HR (applications only), 2 = admin (jobs + applications), 3 = super admin (everything)
  isActive        Boolean @default(true)  // Allow deactivating admin accounts
  
  // Relations
  applications Application[]
  savedJobs    SavedJob[]
  resumes      UserResume[]
  settings     Setting[]    // Add this line
  
  // Admin relations
  createdJobs  Job[]        @relation("JobCreator")

  // New relations for communication
  emailTemplates     EmailTemplate[] @relation("EmailTemplateCreator")
  sentEmails         Email[]         @relation("SentEmails") 
  emailCampaigns     EmailCampaign[] @relation("EmailCampaigns")
  
  @@map("users")
}

// Remove AdminUser model entirely and update Job model
model Category {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String @unique
  description String?
  
  // Relations
  jobs Job[]
  
  @@map("categories")
}

model Job {
  id                        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                     String
  slug                      String   @unique
  description               String
  summary                   String?
  department                String
  employmentType           String   // "Full-time", "Part-time", "Contract", "Internship"
  experienceLevel          String   // "Entry", "Mid", "Senior", "Executive"
  location                  String
  remotePolicy             String   // "Remote", "Hybrid", "On-site"
  
  salaryMin                Int?
  salaryMax                Int?
  salaryCurrency           String   @default("CAD")
  salaryType               String   @default("Annual")
  benefits                  String?
  
  requirements              String
  preferredQualifications  String?
  educationRequired        String?
  yearsExperienceRequired  Int?
  
  applicationDeadline      DateTime?
  startDate               DateTime?
  applicationInstructions  String?
  
  status                   String   @default("Draft") // "Active", "Paused", "Closed", "Draft"
  featured                 Boolean  @default(false)
  showSalary              Boolean  @default(true) 
  priority                 Int      @default(0)
  viewCount               Int      @default(0)
  applicationCount        Int      @default(0)
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  postedAt                DateTime?

  autoExpiresAt     DateTime? // When the job should auto-expire
  lastExpiredCheck  DateTime? // Last time expiration was checked (optional, for tracking)
  
  // Foreign Keys
  categoryId              String   @db.Uuid
  createdBy               String?  @db.Uuid  // Made nullable
  
  // Relations
  category                Category      @relation(fields: [categoryId], references: [id])
  creator                 User?         @relation("JobCreator", fields: [createdBy], references: [id])  // Made nullable
  applications            Application[]
  savedJobs               SavedJob[]
  
  @@map("jobs")
}

model Application {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status      String   @default("Applied") // "Applied", "Reviewing", "Interview", "Rejected", "Hired"
  coverLetter String?
  resumeUrl   String?
  notes       String?
  appliedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // New fields for applicant info
  name        String?
  email       String?
  phone       String?

  // Foreign Keys
  userId      String?  @db.Uuid // made optional for guests
  jobId       String   @db.Uuid

  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  job         Job      @relation(fields: [jobId], references: [id])

  // Ensure one application per user per job (only for signed-in users)
  @@unique([userId, jobId])
  @@map("applications")
}

model SavedJob {
  id        String   @id @default(dbgenerated("gen_random_uuid")) @db.Uuid
  savedAt   DateTime @default(now())
  
  // Foreign Keys
  userId    String   @db.Uuid
  jobId     String   @db.Uuid
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])

   // New relations  
  emails             Email[]         @relation("JobEmails")
  emailCampaigns     EmailCampaign[] @relation("JobCampaigns")
  
  // Ensure one save per user per job
  @@unique([userId, jobId])
  @@map("saved_jobs")
}

model UserResume {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  fileName    String   @map("file_name") @db.VarChar(255)
  fileSize    Int      @map("file_size")
  fileType    String   @map("file_type") @db.VarChar(50)
  storagePath String   @map("storage_path") @db.VarChar(500)
  isDefault   Boolean  @default(false) @map("is_default")
  uploadedAt  DateTime @default(now()) @map("uploaded_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_resumes_user_id")
  @@index([userId, isDefault], map: "idx_user_resumes_default")
  @@map("user_resumes")
}

model Setting {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key            String   // "currency_default", "show_salary_default", etc.
  value          String   // Stored as JSON string for complex data
  category       String   // "system", "jobs", "personal", "notifications"
  userId         String?  @db.Uuid // NULL for system settings, user ID for personal
  privilegeLevel Int      @default(0) // Minimum privilege to modify this setting
  dataType       String   @default("string") // "string", "boolean", "number", "json"
  description    String?  // Human-readable description
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Ensure unique settings per user (or global if userId is null)
  @@unique([key, userId])
  
  @@map("settings")
}

// Email templates for different scenarios
model EmailTemplate {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   // "Interview Invitation", "Rejection - No Experience", etc.
  subject     String   // Email subject line with variables
  content     String   // Email body with variables {{name}}, {{jobTitle}}, etc.
  type        String   // "interview_invite", "rejection", "offer", "status_update", "custom"
  isDefault   Boolean  @default(false) // System default templates
  isActive    Boolean  @default(true)
  
  // Customization
  variables   String?  // JSON array of available variables
  description String?  // What this template is for
  
  // Audit fields
  createdBy   String?  @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  creator     User?    @relation("EmailTemplateCreator", fields: [createdBy], references: [id])
  emails      Email[]  @relation("TemplateEmails")
  
  @@map("email_templates")
}

// Individual emails sent to candidates
model Email {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject       String
  content       String   // Final email content (after variable substitution)
  htmlContent   String?  // HTML version if available
  
  // Recipients
  recipientEmail String
  recipientName  String?
  
  // Context
  applicationId  String?  @db.Uuid  // If sent to specific application
  jobId         String?  @db.Uuid  // If sent to multiple candidates for a job
  templateId    String?  @db.Uuid  // If based on template
  
  // Email metadata
  emailProvider String?  // "resend", "smtp", etc.
  messageId     String?  // Provider's message ID
  status        String   @default("pending") // "pending", "sent", "delivered", "failed", "bounced"
  failureReason String?
  
  // Tracking (for future features)
  openedAt      DateTime?
  clickedAt     DateTime?
  repliedAt     DateTime?
  
  // Audit fields
  sentBy        String   @db.Uuid
  sentAt        DateTime @default(now())
  
  // Relations
  application   Application? @relation("ApplicationEmails", fields: [applicationId], references: [id])
  job           Job?         @relation("JobEmails", fields: [jobId], references: [id])
  template      EmailTemplate? @relation("TemplateEmails", fields: [templateId], references: [id])
  sender        User         @relation("SentEmails", fields: [sentBy], references: [id])
  
  @@map("emails")
}

// Bulk email campaigns (for sending to multiple candidates)
model EmailCampaign {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   // "Interview Invitations - Senior Developer Role"
  subject     String
  content     String
  
  // Targeting
  jobId       String?  @db.Uuid  // If targeting specific job
  status      String?  // If targeting specific status
  filters     String?  // JSON of additional filters
  
  // Campaign metadata
  totalRecipients    Int      @default(0)
  successfulSends    Int      @default(0)
  failedSends        Int      @default(0)
  
  // Audit fields
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(now())
  sentAt      DateTime?
  
  // Relations
  job         Job?     @relation("JobCampaigns", fields: [jobId], references: [id])
  creator     User     @relation("EmailCampaigns", fields: [createdBy], references: [id])
  emails      Email[]  @relation("CampaignEmails")
  
  @@map("email_campaigns")
}

// Communication preferences and settings
model CommunicationSetting {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key            String   // "default_from_name", "email_signature", "auto_send_on_status_change"
  value          String
  category       String   // "email", "sms", "automation"
  description    String?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([key])
  @@map("communication_settings")
}

// Optional: Email automation rules
model EmailAutomationRule {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   // "Send rejection after 7 days in Applied"
  trigger     String   // "status_change", "time_delay", "manual"
  conditions  String   // JSON of conditions
  templateId  String   @db.Uuid
  isActive    Boolean  @default(true)
  
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  template    EmailTemplate @relation(fields: [templateId], references: [id])
  creator     User          @relation(fields: [createdBy], references: [id])
  
  @@map("email_automation_rules")
}