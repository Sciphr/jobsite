generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                  String                @unique
  password               String?
  firstName              String?
  lastName               String?
  phone                  String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  role                   String?               @default("user") @db.VarChar
  privilegeLevel         Int?                  @default(0)
  isActive               Boolean?              @default(true)
  privilege_level        Int?                  @default(0)
  is_active              Boolean?              @default(true)
  applications           Application[]
  email_automation_rules EmailAutomationRule[]
  email_campaigns        EmailCampaign[]
  email_templates        EmailTemplate[]
  emails                 Email[]
  createdJobs            Job[]                 @relation("JobCreator")
  savedJobs              SavedJob[]
  settings               Setting[]
  resumes                UserResume[]
  
  // Audit log relations
  audit_logs_as_actor       AuditLog[] @relation("AuditLogActor")
  audit_logs_as_related     AuditLog[] @relation("AuditLogRelatedUser")

  @@map("users")
}

model Category {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @unique
  description String?
  jobs        Job[]

  @@map("categories")
}

model Job {
  id                      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                   String
  slug                    String          @unique
  description             String
  summary                 String?
  department              String
  employmentType          String
  experienceLevel         String
  location                String
  remotePolicy            String
  salaryMin               Int?
  salaryMax               Int?
  salaryCurrency          String          @default("USD")
  salaryType              String          @default("Annual")
  benefits                String?
  requirements            String
  preferredQualifications String?
  educationRequired       String?
  yearsExperienceRequired Int?
  applicationDeadline     DateTime?
  startDate               DateTime?
  applicationInstructions String?
  status                  String          @default("Draft")
  featured                Boolean         @default(false)
  priority                Int             @default(0)
  viewCount               Int             @default(0)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  postedAt                DateTime?
  categoryId              String          @db.Uuid
  createdBy               String?         @db.Uuid
  autoExpiresAt           DateTime?
  lastExpiredCheck        DateTime?
  showSalary              Boolean         @default(true)
  auto_expires_at         DateTime?       @db.Timestamp(6)
  last_expired_check      DateTime?       @db.Timestamp(6)
  applicationCount        Int?            @default(0)
  applications            Application[]
  email_campaigns         EmailCampaign[]
  emails                  Email[]
  category                Category        @relation(fields: [categoryId], references: [id])
  creator                 User?           @relation("JobCreator", fields: [createdBy], references: [id])
  savedJobs               SavedJob[]
  
  // Audit log relations
  audit_logs              AuditLog[]      @relation("AuditLogRelatedJob")

  @@map("jobs")
}

model Application {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status      String   @default("Applied")
  coverLetter String?
  resumeUrl   String?
  notes       String?
  appliedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?  @db.Uuid
  jobId       String   @db.Uuid
  name        String?
  email       String?
  phone       String?
  job         Job      @relation(fields: [jobId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  emails      Email[]
  
  // Audit log relations
  audit_logs  AuditLog[] @relation("AuditLogRelatedApplication")

  @@unique([userId, jobId])
  @@map("applications")
}

model SavedJob {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  savedAt DateTime @default(now())
  userId  String   @db.Uuid
  jobId   String   @db.Uuid
  job     Job      @relation(fields: [jobId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@unique([userId, jobId])
  @@map("saved_jobs")
}

model UserResume {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  fileName    String   @map("file_name") @db.VarChar(255)
  fileSize    Int      @map("file_size")
  fileType    String   @map("file_type") @db.VarChar(50)
  storagePath String   @map("storage_path") @db.VarChar(500)
  isDefault   Boolean  @default(false) @map("is_default")
  uploadedAt  DateTime @default(now()) @map("uploaded_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_resumes_user_id")
  @@index([userId, isDefault], map: "idx_user_resumes_default")
  @@map("user_resumes")
}

model Setting {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key            String
  value          String
  category       String
  userId         String?  @db.Uuid
  privilegeLevel Int      @default(0)
  dataType       String   @default("string")
  description    String?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([key, userId])
  @@map("settings")
}

model EmailTemplate {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @db.VarChar(255)
  subject      String
  content      String
  type         String    @db.VarChar(100)
  is_default   Boolean?  @default(false)
  is_active    Boolean?  @default(true)
  variables    String?
  description  String?
  created_by   String?   @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  category     String?   @db.VarChar(50)
  tags         String[]
  usage_count  Int?      @default(0)
  last_used_at DateTime? @db.Timestamp(6)
  users        User?     @relation(fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_email_templates_created_by")

  @@index([is_active], map: "idx_email_templates_is_active")
  @@index([type], map: "idx_email_templates_type")
  @@map("email_templates")
}

model Email {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject         String
  content         String
  html_content    String?
  recipient_email String         @db.VarChar(255)
  recipient_name  String?        @db.VarChar(255)
  application_id  String?        @db.Uuid
  job_id          String?        @db.Uuid
  template_id     String?        @db.Uuid
  email_provider  String?        @db.VarChar(100)
  message_id      String?        @db.VarChar(255)
  status          String?        @default("pending") @db.VarChar(50)
  failure_reason  String?
  opened_at       DateTime?      @db.Timestamp(6)
  clicked_at      DateTime?      @db.Timestamp(6)
  replied_at      DateTime?      @db.Timestamp(6)
  sent_by         String         @db.Uuid
  sent_at         DateTime?      @default(now()) @db.Timestamp(6)
  campaign_id     String?        @db.Uuid
  applications    Application?   @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  email_campaigns EmailCampaign? @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobs            Job?           @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           User           @relation(fields: [sent_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([application_id], map: "idx_emails_application_id")
  @@index([job_id], map: "idx_emails_job_id")
  @@index([sent_at], map: "idx_emails_sent_at")
  @@index([sent_by], map: "idx_emails_sent_by")
  @@index([status], map: "idx_emails_status")
  @@index([template_id], map: "idx_emails_template_id")
  @@map("emails")
}

model EmailCampaign {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String    @db.VarChar(255)
  subject          String
  content          String
  job_id           String?   @db.Uuid
  status           String?   @db.VarChar(50)
  filters          String?
  total_recipients Int?      @default(0)
  successful_sends Int?      @default(0)
  failed_sends     Int?      @default(0)
  created_by       String    @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  sent_at          DateTime? @db.Timestamp(6)
  users            User      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobs             Job?      @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emails           Email[]

  @@index([created_by], map: "idx_email_campaigns_created_by")
  @@index([job_id], map: "idx_email_campaigns_job_id")
  @@map("email_campaigns")
}

model CommunicationSetting {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String    @unique @db.VarChar(255)
  value       String
  category    String    @db.VarChar(100)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  @@map("communication_settings")
}

model EmailAutomationRule {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  trigger     String    @db.VarChar(100)
  conditions  String
  template_id String    @db.Uuid
  is_active   Boolean?  @default(true)
  created_by  String    @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  users       User      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("email_automation_rules")
}

model AuditLog {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  // Event Classification
  event_type     String    @db.VarChar(100)  // CREATE, UPDATE, DELETE, LOGIN, SEND_EMAIL, etc.
  category       String    @db.VarChar(50)   // USER, JOB, APPLICATION, EMAIL, SYSTEM, etc.
  subcategory    String?   @db.VarChar(50)   // STATUS_CHANGE, TEMPLATE_CREATE, etc.
  
  // Entity Information
  entity_type    String?   @db.VarChar(50)   // application, job, user, email_template, etc.
  entity_id      String?   @db.Uuid          // ID of the entity being acted upon
  entity_name    String?   @db.VarChar(255)  // Human readable name/title of entity
  
  // Actor Information
  actor_id       String?   @db.Uuid          // Who performed the action
  actor_type     String    @default("user") @db.VarChar(20)  // user, system, api, cron
  actor_name     String?   @db.VarChar(255)  // Actor's name for quick reference
  
  // Action Details
  action         String    @db.VarChar(255)  // Brief description of what happened
  description    String?                     // Detailed description
  
  // Change Tracking
  old_values     Json?                       // Previous state (for updates)
  new_values     Json?                       // New state (for updates/creates)
  changes        Json?                       // Specific fields that changed
  
  // Context & Metadata
  ip_address     String?   @db.VarChar(45)   // IPv4/IPv6 address
  user_agent     String?   @db.VarChar(500)  // Browser/client info
  session_id     String?   @db.VarChar(255)  // Session identifier
  request_id     String?   @db.VarChar(255)  // Request tracing ID
  
  // Relationships (for easy filtering)
  related_user_id        String? @db.Uuid   // Related user (for application actions, etc.)
  related_job_id         String? @db.Uuid   // Related job
  related_application_id String? @db.Uuid   // Related application
  
  // Timestamps
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  
  // Severity & Status
  severity       String    @default("info") @db.VarChar(20)  // info, warning, error, critical
  status         String    @default("success") @db.VarChar(20)  // success, failure, partial
  
  // Additional Context
  tags           String[]  @default([])      // Searchable tags
  metadata       Json?                       // Flexible additional data
  
  // Relations (optional, for complex queries)
  actor          User?     @relation("AuditLogActor", fields: [actor_id], references: [id], onDelete: SetNull)
  related_user   User?     @relation("AuditLogRelatedUser", fields: [related_user_id], references: [id], onDelete: SetNull)
  related_job    Job?      @relation("AuditLogRelatedJob", fields: [related_job_id], references: [id], onDelete: SetNull)
  related_application Application? @relation("AuditLogRelatedApplication", fields: [related_application_id], references: [id], onDelete: SetNull)

  // Indexes for performance
  @@index([event_type], map: "idx_audit_logs_event_type")
  @@index([category], map: "idx_audit_logs_category")
  @@index([entity_type, entity_id], map: "idx_audit_logs_entity")
  @@index([actor_id], map: "idx_audit_logs_actor")
  @@index([created_at], map: "idx_audit_logs_created_at")
  @@index([related_application_id], map: "idx_audit_logs_related_application")
  @@index([related_job_id], map: "idx_audit_logs_related_job")
  @@index([related_user_id], map: "idx_audit_logs_related_user")
  @@index([category, created_at], map: "idx_audit_logs_category_date")
  @@index([entity_type, entity_id, created_at], map: "idx_audit_logs_entity_timeline")

  @@map("audit_logs")
}
