generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model application_notes {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id      String   @db.Uuid
  content             String
  type                String   @default("note") @db.VarChar(50)
  author_id           String?  @db.Uuid
  author_name         String?  @db.VarChar(255)
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  metadata            Json?
  is_system_generated Boolean? @default(false)
}

model applications {
  id                                    String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                                String                          @default("Applied")
  coverLetter                           String?
  resumeUrl                             String?
  notes                                 String?
  appliedAt                             DateTime                        @default(now())
  updatedAt                             DateTime
  userId                                String?                         @db.Uuid
  jobId                                 String                          @db.Uuid
  name                                  String?
  email                                 String?
  phone                                 String?
  is_archived                           Boolean?                        @default(false)
  archived_at                           DateTime?                       @db.Timestamp(6)
  archived_by                           String?                         @db.Uuid
  archive_reason                        String?                         @db.VarChar(100)
  current_stage_entered_at              DateTime?                       @db.Timestamp(6)
  time_in_current_stage_seconds         Int?                            @default(0)
  total_application_time_seconds        Int?                            @default(0)
  rating                                Int?
  rating_type                           String?                         @db.VarChar(20)
  ai_rating                             Int?
  rating_updated_at                     DateTime?                       @db.Timestamp(6)
  rated_by                              String?                         @db.Uuid
  hris_synced                           Boolean?                        @default(false)
  hris_synced_at                        DateTime?                       @db.Timestamp(6)
  hris_sync_error                       String?
  hris_employee_id                      String?                         @db.VarChar(255)
  source_type                           String?                         @default("applied") @db.VarChar(20)
  sourced_by                            String?                         @db.Uuid
  sourced_at                            DateTime?                       @db.Timestamp(6)
  invitation_sent_at                    DateTime?                       @db.Timestamp(6)
  invitation_token                      String?                         @unique @db.VarChar(255)
  application_screening_answers         application_screening_answers[]
  application_stage_history             application_stage_history[]
  jobs                                  jobs                            @relation(fields: [jobId], references: [id])
  users_applications_sourced_byTousers  users?                          @relation("applications_sourced_byTousers", fields: [sourced_by], references: [id], onUpdate: NoAction)
  users                                 users?                          @relation(fields: [userId], references: [id])
  users_applications_archived_byTousers users?                          @relation("applications_archived_byTousers", fields: [archived_by], references: [id], onUpdate: NoAction, map: "fk_applications_archived_by")
  users_applications_rated_byTousers    users?                          @relation("applications_rated_byTousers", fields: [rated_by], references: [id], onUpdate: NoAction, map: "fk_applications_rated_by")
  audit_logs                            audit_logs[]
  background_checks                     background_checks[]
  emails                                emails[]
  hire_approval_requests                hire_approval_requests[]
  interview_reschedule_requests         interview_reschedule_requests[]
  interview_tokens                      interview_tokens[]
  interviews                            interviews[]

  @@unique([userId, jobId])
  @@index([is_archived, status], map: "idx_applications_archived_status")
  @@index([is_archived], map: "idx_applications_is_archived")
  @@index([rating], map: "idx_applications_rating")
  @@index([rating_type], map: "idx_applications_rating_type")
  @@index([rating_updated_at], map: "idx_applications_rating_updated_at")
  @@index([hris_employee_id], map: "idx_applications_hris_employee_id")
  @@index([hris_synced], map: "idx_applications_hris_synced")
  @@index([source_type], map: "idx_applications_source_type")
  @@index([sourced_by], map: "idx_applications_sourced_by")
}

model audit_logs {
  id                                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_type                              String        @db.VarChar(100)
  category                                String        @db.VarChar(50)
  subcategory                             String?       @db.VarChar(50)
  entity_type                             String?       @db.VarChar(50)
  entity_id                               String?       @db.Uuid
  entity_name                             String?       @db.VarChar(255)
  actor_id                                String?       @db.Uuid
  actor_type                              String        @default("user") @db.VarChar(20)
  actor_name                              String?       @db.VarChar(255)
  action                                  String        @db.VarChar(255)
  description                             String?
  old_values                              Json?
  new_values                              Json?
  changes                                 Json?
  ip_address                              String?       @db.VarChar(45)
  user_agent                              String?       @db.VarChar(500)
  session_id                              String?       @db.VarChar(255)
  request_id                              String?       @db.VarChar(255)
  related_user_id                         String?       @db.Uuid
  related_job_id                          String?       @db.Uuid
  related_application_id                  String?       @db.Uuid
  created_at                              DateTime      @default(now()) @db.Timestamp(6)
  severity                                String        @default("info") @db.VarChar(20)
  status                                  String        @default("success") @db.VarChar(20)
  tags                                    String[]      @default([])
  metadata                                Json?
  users_audit_logs_actor_idTousers        users?        @relation("audit_logs_actor_idTousers", fields: [actor_id], references: [id], onUpdate: NoAction, map: "fk_audit_logs_actor")
  applications                            applications? @relation(fields: [related_application_id], references: [id], onUpdate: NoAction, map: "fk_audit_logs_related_application")
  jobs                                    jobs?         @relation(fields: [related_job_id], references: [id], onUpdate: NoAction, map: "fk_audit_logs_related_job")
  users_audit_logs_related_user_idTousers users?        @relation("audit_logs_related_user_idTousers", fields: [related_user_id], references: [id], onUpdate: NoAction, map: "fk_audit_logs_related_user")

  @@index([actor_id], map: "idx_audit_logs_actor")
  @@index([category, created_at], map: "idx_audit_logs_category_date")
  @@index([created_at], map: "idx_audit_logs_created_at")
  @@index([entity_type, entity_id], map: "idx_audit_logs_entity")
  @@index([entity_type, entity_id, created_at], map: "idx_audit_logs_entity_timeline")
  @@index([related_application_id], map: "idx_audit_logs_related_application")
  @@index([related_job_id], map: "idx_audit_logs_related_job")
  @@index([related_user_id], map: "idx_audit_logs_related_user")
}

model categories {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @unique
  description String?
  jobs        jobs[]
}

model employment_types {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?
  is_active   Boolean  @default(true)
  sort_order  Int      @default(0)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  jobs        jobs[]

  @@index([is_active, sort_order], map: "idx_employment_types_active_sort")
}

model experience_levels {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?
  is_active   Boolean  @default(true)
  sort_order  Int      @default(0)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  jobs        jobs[]

  @@index([is_active, sort_order], map: "idx_experience_levels_active_sort")
}

model remote_policies {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?
  is_active   Boolean  @default(true)
  sort_order  Int      @default(0)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  jobs        jobs[]

  @@index([is_active, sort_order], map: "idx_remote_policies_active_sort")
}

model communication_settings {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String    @unique @db.VarChar(255)
  value       String
  category    String    @db.VarChar(100)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
}

model email_automation_rules {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String    @db.VarChar(255)
  trigger        String    @db.VarChar(100)
  conditions     String
  template_id    String    @db.Uuid
  is_active      Boolean?  @default(true)
  created_by     String    @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  recipient_type String?   @default("applicant") @db.VarChar(50)
  users          users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model email_campaigns {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String    @db.VarChar(255)
  subject          String
  content          String
  job_id           String?   @db.Uuid
  status           String?   @db.VarChar(50)
  filters          String?
  total_recipients Int?      @default(0)
  successful_sends Int?      @default(0)
  failed_sends     Int?      @default(0)
  created_by       String    @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  sent_at          DateTime? @db.Timestamp(6)
  users            users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobs             jobs?     @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emails           emails[]

  @@index([created_by], map: "idx_email_campaigns_created_by")
  @@index([job_id], map: "idx_email_campaigns_job_id")
}

model email_templates {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @db.VarChar(255)
  subject      String
  content      String
  type         String    @db.VarChar(100)
  is_default   Boolean?  @default(false)
  is_active    Boolean?  @default(true)
  variables    String?
  description  String?
  created_by   String?   @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  category     String?   @db.VarChar(50)
  tags         String[]
  usage_count  Int?      @default(0)
  last_used_at DateTime? @db.Timestamp(6)
  users        users?    @relation(fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_email_templates_created_by")

  @@index([is_active], map: "idx_email_templates_is_active")
  @@index([type], map: "idx_email_templates_type")
}

model emails {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject         String
  content         String
  html_content    String?
  recipient_email String           @db.VarChar(255)
  recipient_name  String?          @db.VarChar(255)
  application_id  String?          @db.Uuid
  job_id          String?          @db.Uuid
  template_id     String?          @db.Uuid
  email_provider  String?          @db.VarChar(100)
  message_id      String?          @db.VarChar(255)
  status          String?          @default("pending") @db.VarChar(50)
  failure_reason  String?
  opened_at       DateTime?        @db.Timestamp(6)
  clicked_at      DateTime?        @db.Timestamp(6)
  replied_at      DateTime?        @db.Timestamp(6)
  sent_by         String           @db.Uuid
  sent_at         DateTime?        @default(now()) @db.Timestamp(6)
  campaign_id     String?          @db.Uuid
  applications    applications?    @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  email_campaigns email_campaigns? @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobs            jobs?            @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users            @relation(fields: [sent_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([application_id], map: "idx_emails_application_id")
  @@index([job_id], map: "idx_emails_job_id")
  @@index([sent_at], map: "idx_emails_sent_at")
  @@index([sent_by], map: "idx_emails_sent_by")
  @@index([status], map: "idx_emails_status")
  @@index([template_id], map: "idx_emails_template_id")
}

model interview_reschedule_requests {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  interview_token_id String           @db.Uuid
  application_id     String           @db.Uuid
  response_type      String           @db.VarChar(50)
  alternative_times  Json?            @db.Json
  written_response   String?
  status             String           @default("pending") @db.VarChar(50)
  submitted_at       DateTime         @db.Timestamp(6)
  reviewed_at        DateTime?        @db.Timestamp(6)
  reviewed_by        String?          @db.Uuid
  review_notes       String?
  created_at         DateTime         @default(now()) @db.Timestamp(6)
  updated_at         DateTime         @default(now()) @db.Timestamp(6)
  applications       applications     @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_interview_reschedule_requests_application")
  users              users?           @relation(fields: [reviewed_by], references: [id], onUpdate: NoAction, map: "fk_interview_reschedule_requests_reviewer")
  interview_tokens   interview_tokens @relation(fields: [interview_token_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_interview_reschedule_requests_token")

  @@index([application_id], map: "idx_interview_reschedule_requests_application_id")
  @@index([status], map: "idx_interview_reschedule_requests_status")
  @@index([submitted_at], map: "idx_interview_reschedule_requests_submitted_at")
  @@index([interview_token_id], map: "idx_interview_reschedule_requests_token_id")
}

model interview_tokens {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id                String                          @db.Uuid
  reschedule_token              String                          @unique @db.VarChar(255)
  acceptance_token              String                          @unique @db.VarChar(255)
  scheduled_at                  DateTime                        @db.Timestamp(6)
  duration                      Int                             @default(45)
  type                          String                          @db.VarChar(50)
  interviewers                  Json?                           @db.Json
  location                      String?
  agenda                        String?
  notes                         String?
  calendar_event_id             String?                         @db.VarChar(255)
  status                        String                          @default("pending") @db.VarChar(50)
  responded_at                  DateTime?                       @db.Timestamp(6)
  expires_at                    DateTime                        @db.Timestamp(6)
  created_at                    DateTime                        @default(now()) @db.Timestamp(6)
  updated_at                    DateTime                        @default(now()) @db.Timestamp(6)
  meeting_link                  String?                         @db.VarChar(500)
  meeting_provider              String?                         @default("google") @db.VarChar(50)
  is_completed                  Boolean?                        @default(false)
  completed_at                  DateTime?                       @db.Timestamp(6)
  interview_notes               String?
  interview_rating              Int?
  last_reminder_sent_at         DateTime?                       @db.Timestamp(6)
  interview_reschedule_requests interview_reschedule_requests[]
  applications                  applications                    @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_interview_tokens_application")

  @@index([acceptance_token], map: "idx_interview_tokens_acceptance_token")
  @@index([application_id], map: "idx_interview_tokens_application_id")
  @@index([expires_at], map: "idx_interview_tokens_expires_at")
  @@index([reschedule_token], map: "idx_interview_tokens_reschedule_token")
  @@index([status], map: "idx_interview_tokens_status")
  @@index([completed_at], map: "idx_interview_tokens_completed_at")
  @@index([is_completed], map: "idx_interview_tokens_is_completed")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model interviews {
  id                                     String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id                         String       @db.Uuid
  interviewer_id                         String       @db.Uuid
  job_id                                 String       @db.Uuid
  type                                   String       @db.VarChar(20)
  status                                 String       @default("scheduled") @db.VarChar(20)
  duration_minutes                       Int          @default(45)
  proposed_time_slots                    Json?
  scheduled_at                           DateTime?    @db.Timestamp(6)
  confirmed_at                           DateTime?    @db.Timestamp(6)
  timezone                               String       @default("America/Toronto") @db.VarChar(100)
  meeting_link                           String?
  meeting_location                       String?
  agenda                                 String?
  notes                                  String?
  additional_interviewers                Json?
  google_calendar_event_id               String?      @db.VarChar(255)
  calendar_event_created                 Boolean?     @default(false)
  invitation_sent_at                     DateTime?    @db.Timestamp(6)
  reminder_sent_at                       DateTime?    @db.Timestamp(6)
  created_at                             DateTime?    @default(now()) @db.Timestamp(6)
  updated_at                             DateTime?    @default(now()) @db.Timestamp(6)
  created_by                             String?      @db.Uuid
  applications                           applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_interviews_created_byTousers     users?       @relation("interviews_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_interviews_interviewer_idTousers users        @relation("interviews_interviewer_idTousers", fields: [interviewer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  jobs                                   jobs         @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([application_id], map: "idx_interviews_application_id")
  @@index([created_at], map: "idx_interviews_created_at")
  @@index([interviewer_id], map: "idx_interviews_interviewer_id")
  @@index([job_id], map: "idx_interviews_job_id")
  @@index([scheduled_at], map: "idx_interviews_scheduled_at")
  @@index([status], map: "idx_interviews_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model jobs {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                    String
  slug                     String                     @unique
  description              String
  summary                  String?
  department               String
  location                 String
  salaryMin                Int?
  salaryMax                Int?
  salaryCurrency           String                     @default("USD")
  salaryType               String                     @default("Annual")
  benefits                 String?
  requirements             String
  preferredQualifications  String?
  educationRequired        String?
  yearsExperienceRequired  Int?
  applicationDeadline      DateTime?
  startDate                DateTime?
  applicationInstructions  String?
  status                   String                     @default("Draft")
  featured                 Boolean                    @default(false)
  priority                 Int                        @default(0)
  viewCount                Int                        @default(0)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  postedAt                 DateTime?
  categoryId               String                     @db.Uuid
  createdBy                String?                    @db.Uuid
  autoExpiresAt            DateTime?
  lastExpiredCheck         DateTime?
  showSalary               Boolean                    @default(true)
  auto_expires_at          DateTime?                  @db.Timestamp(6)
  last_expired_check       DateTime?                  @db.Timestamp(6)
  applicationCount         Int?                       @default(0)
  employment_type_id       String?                    @db.Uuid
  experience_level_id      String?                    @db.Uuid
  remote_policy_id         String?                    @db.Uuid
  application_type         String?                    @default("quick") @db.VarChar(20)
  visibility               String?                    @default("external") @db.VarChar(20)
  applications             applications[]
  audit_logs               audit_logs[]
  email_campaigns          email_campaigns[]
  emails                   emails[]
  interviews               interviews[]
  job_approval_requests    job_approval_requests[]
  job_invitations          job_invitations[]
  job_screening_questions  job_screening_questions[]
  employment_types         employment_types?          @relation(fields: [employment_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_jobs_employment_type_id")
  experience_levels        experience_levels?         @relation(fields: [experience_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_jobs_experience_level_id")
  remote_policies          remote_policies?           @relation(fields: [remote_policy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_jobs_remote_policy_id")
  categories               categories                 @relation(fields: [categoryId], references: [id])
  users                    users?                     @relation(fields: [createdBy], references: [id])
  notification_logs        notification_logs[]
  saved_jobs               saved_jobs[]
  talent_pool_interactions talent_pool_interactions[]

  @@index([employment_type_id], map: "idx_jobs_employment_type_id")
  @@index([experience_level_id], map: "idx_jobs_experience_level_id")
  @@index([remote_policy_id], map: "idx_jobs_remote_policy_id")
  @@index([application_type], map: "idx_jobs_application_type")
  @@index([visibility], map: "idx_jobs_visibility")
}

model permissions {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resource             String             @db.VarChar(50)
  action               String             @db.VarChar(50)
  description          String
  category             String             @db.VarChar(50)
  is_system_permission Boolean?           @default(true)
  created_at           DateTime?          @default(now()) @db.Timestamptz(6)
  role_permissions     role_permissions[]

  @@unique([resource, action])
  @@index([resource, action], map: "idx_permissions_resource_action")
}

model role_permissions {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id       String      @db.Uuid
  permission_id String      @db.Uuid
  granted_at    DateTime?   @default(now()) @db.Timestamptz(6)
  granted_by    String?     @db.Uuid
  users         users?      @relation(fields: [granted_by], references: [id], onUpdate: NoAction)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([role_id, permission_id])
  @@index([permission_id], map: "idx_role_permissions_permission_id")
  @@index([role_id], map: "idx_role_permissions_role_id")
}

model roles {
  id                            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                          String             @unique @db.VarChar(100)
  description                   String?
  color                         String?            @default("#6b7280") @db.VarChar(7)
  is_system_role                Boolean?           @default(false)
  is_active                     Boolean?           @default(true)
  created_at                    DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?          @default(now()) @db.Timestamptz(6)
  created_by                    String?            @db.Uuid
  is_ldap_role                  Boolean?           @default(false)
  ldap_group_name               String?            @db.VarChar(200)
  is_editable                   Boolean?           @default(true)
  role_permissions              role_permissions[]
  users_roles_created_byTousers users?             @relation("roles_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction)
  user_roles                    user_roles[]

  @@index([is_active], map: "idx_roles_active")
  @@index([is_ldap_role], map: "idx_roles_ldap")
}

model saved_jobs {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  savedAt DateTime @default(now())
  userId  String   @db.Uuid
  jobId   String   @db.Uuid
  jobs    jobs     @relation(fields: [jobId], references: [id])
  users   users    @relation(fields: [userId], references: [id])

  @@unique([userId, jobId])
}

model settings {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key            String
  value          String
  category       String
  userId         String?  @db.Uuid
  privilegeLevel Int      @default(0)
  dataType       String   @default("string")
  description    String?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @db.Timestamptz(6)
  users          users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([key, userId])
}

model user_resumes {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String   @db.Uuid
  file_name    String   @db.VarChar(255)
  file_size    Int
  file_type    String   @db.VarChar(50)
  storage_path String   @db.VarChar(500)
  is_default   Boolean  @default(false)
  uploaded_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, is_default], map: "idx_user_resumes_default")
  @@index([user_id], map: "idx_user_resumes_user_id")
}

model users {
  id                                                                    String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                                                 String                          @unique
  password                                                              String?
  firstName                                                             String?
  lastName                                                              String?
  phone                                                                 String?
  createdAt                                                             DateTime                        @default(now())
  updatedAt                                                             DateTime
  role                                                                  String?                         @default("user") @db.VarChar
  privilegeLevel                                                        Int?                            @default(0)
  isActive                                                              Boolean?                        @default(true)
  is_active                                                             Boolean?                        @default(true)
  google_access_token                                                   String?
  google_refresh_token                                                  String?
  google_token_expires_at                                               DateTime?                       @db.Timestamp(6)
  google_calendar_id                                                    String?                         @default("primary") @db.VarChar(255)
  google_email                                                          String?                         @db.VarChar(255)
  calendar_integration_enabled                                          Boolean?                        @default(false)
  calendar_integration_connected_at                                     DateTime?                       @db.Timestamp(6)
  calendar_timezone                                                     String?                         @default("America/Toronto") @db.VarChar(100)
  zoom_access_token                                                     String?                         @db.VarChar(2000)
  zoom_refresh_token                                                    String?                         @db.VarChar(2000)
  zoom_token_expires_at                                                 DateTime?                       @db.Timestamp(6)
  zoom_user_id                                                          String?                         @db.VarChar(255)
  zoom_email                                                            String?                         @db.VarChar(255)
  zoom_integration_enabled                                              Boolean?                        @default(false)
  zoom_integration_connected_at                                         DateTime?                       @db.Timestamp(6)
  microsoft_access_token                                                String?
  microsoft_refresh_token                                               String?
  microsoft_token_expires_at                                            DateTime?                       @db.Timestamp(6)
  microsoft_user_id                                                     String?                         @db.VarChar(255)
  microsoft_email                                                       String?                         @db.VarChar(255)
  microsoft_tenant_id                                                   String?                         @db.VarChar(255)
  microsoft_integration_enabled                                         Boolean?                        @default(false)
  microsoft_integration_connected_at                                    DateTime?                       @db.Timestamp(6)
  email_notifications_enabled                                           Boolean?                        @default(true)
  weekly_digest_enabled                                                 Boolean?                        @default(false)
  instant_job_alerts_enabled                                            Boolean?                        @default(false)
  notification_email                                                    String?                         @db.VarChar(255)
  max_daily_notifications                                               Int?                            @default(5)
  notification_batch_minutes                                            Int?                            @default(30)
  last_notification_sent_at                                             DateTime?                       @db.Timestamp(6)
  account_type                                                          String?                         @default("local") @db.VarChar(20)
  ldap_dn                                                               String?                         @db.VarChar(500)
  ldap_groups                                                           String[]
  ldap_synced_at                                                        DateTime?                       @db.Timestamptz(6)
  mfa_enabled                                                           Boolean?                        @default(false)
  mfa_secret                                                            String?
  mfa_backup_codes                                                      String[]
  mfa_phone_number                                                      String?                         @db.VarChar(20)
  mfa_method                                                            String?                         @default("disabled") @db.VarChar(20)
  mfa_setup_at                                                          DateTime?                       @db.Timestamptz(6)
  mfa_last_used                                                         DateTime?                       @db.Timestamptz(6)
  mfa_methods_enabled                                                   String[]                        @default([])
  mfa_totp_secret                                                       String?
  mfa_email_enabled                                                     Boolean?                        @default(false)
  skills                                                                String[]
  bio                                                                   String?
  linkedin_url                                                          String?                         @db.VarChar(500)
  portfolio_url                                                         String?                         @db.VarChar(500)
  years_experience                                                      Int?
  current_company                                                       String?                         @db.VarChar(255)
  current_title                                                         String?                         @db.VarChar(255)
  location                                                              String?                         @db.VarChar(255)
  available_for_opportunities                                           Boolean?                        @default(true)
  last_profile_update                                                   DateTime?                       @default(now()) @db.Timestamp(6)
  api_keys                                                              api_keys?
  application_stage_history                                             application_stage_history[]
  applications_applications_sourced_byTousers                           applications[]                  @relation("applications_sourced_byTousers")
  applications                                                          applications[]
  applications_applications_archived_byTousers                          applications[]                  @relation("applications_archived_byTousers")
  applications_applications_rated_byTousers                             applications[]                  @relation("applications_rated_byTousers")
  audit_logs_audit_logs_actor_idTousers                                 audit_logs[]                    @relation("audit_logs_actor_idTousers")
  audit_logs_audit_logs_related_user_idTousers                          audit_logs[]                    @relation("audit_logs_related_user_idTousers")
  background_checks                                                     background_checks[]
  email_automation_rules                                                email_automation_rules[]
  email_campaigns                                                       email_campaigns[]
  email_templates                                                       email_templates[]
  emails                                                                emails[]
  hire_approval_requests_requested                                      hire_approval_requests[]        @relation("hire_requests_requested")
  hire_approval_requests_reviewed                                       hire_approval_requests[]        @relation("hire_requests_reviewed")
  interview_reschedule_requests                                         interview_reschedule_requests[]
  interviews_interviews_created_byTousers                               interviews[]                    @relation("interviews_created_byTousers")
  interviews_interviews_interviewer_idTousers                           interviews[]                    @relation("interviews_interviewer_idTousers")
  job_alert_subscriptions                                               job_alert_subscriptions[]
  job_approval_requests_requested                                       job_approval_requests[]         @relation("job_requests_requested")
  job_approval_requests_reviewed                                        job_approval_requests[]         @relation("job_requests_reviewed")
  job_invitations_job_invitations_candidate_idTousers                   job_invitations[]               @relation("job_invitations_candidate_idTousers")
  job_invitations_job_invitations_invited_byTousers                     job_invitations[]               @relation("job_invitations_invited_byTousers")
  jobs                                                                  jobs[]
  mfa_codes                                                             mfa_codes[]
  notification_logs                                                     notification_logs[]
  question_templates                                                    question_templates[]
  role_permissions                                                      role_permissions[]
  roles_roles_created_byTousers                                         roles[]                         @relation("roles_created_byTousers")
  saved_jobs                                                            saved_jobs[]
  security_alerts_security_alerts_resolved_byTousers                    security_alerts[]               @relation("security_alerts_resolved_byTousers")
  security_events_security_events_user_idTousers                        security_events[]               @relation("security_events_user_idTousers")
  settings                                                              settings[]
  talent_pool_interactions_talent_pool_interactions_admin_idTousers     talent_pool_interactions[]      @relation("talent_pool_interactions_admin_idTousers")
  talent_pool_interactions_talent_pool_interactions_candidate_idTousers talent_pool_interactions[]      @relation("talent_pool_interactions_candidate_idTousers")
  user_resumes                                                          user_resumes[]
  user_roles                                                            user_roles[]
  weekly_digests                                                        weekly_digests[]

  @@index([account_type], map: "idx_users_account_type")
  @@index([mfa_methods_enabled], map: "idx_users_mfa_methods", type: Gin)
  @@index([available_for_opportunities], map: "idx_users_available")
  @@index([location], map: "idx_users_location")
  @@index([skills], map: "idx_users_skills", type: Gin)
}

model mfa_codes {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.Uuid
  code       String    @db.VarChar(10)
  method     String    @db.VarChar(20)
  expires_at DateTime  @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  ip_address String?   @db.Inet
  user_agent String?
  is_active  Boolean?  @default(true)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_roles {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  role_id     String    @db.Uuid
  assigned_at DateTime? @default(now()) @db.Timestamptz(6)
  assigned_by String?   @db.Uuid
  is_active   Boolean?  @default(true)
  roles       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_roles_role_id")
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_roles_user_id")

  @@unique([user_id, role_id], map: "unique_user_role")
  @@index([user_id], map: "idx_user_roles_user_id")
  @@index([role_id], map: "idx_user_roles_role_id")
  @@index([is_active], map: "idx_user_roles_active")
}

model weekly_digests {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  week_start        DateTime @db.Timestamp(6)
  week_end          DateTime @db.Timestamp(6)
  digest_type       String   @default("scheduled") @db.VarChar(20)
  recipient_count   Int
  successful_sends  Int
  failed_sends      Int
  sent_at           DateTime @db.Timestamp(6)
  sent_by           String   @db.Uuid
  theme             String?  @db.VarChar(50)
  sections_included Json?    @db.Json
  configuration     Json?    @db.Json
  date_range        String?  @db.VarChar(100)
  status            String   @default("completed") @db.VarChar(20)
  error_message     String?
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  users             users    @relation(fields: [sent_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_weekly_digests_sent_by")

  @@index([sent_at], map: "idx_weekly_digests_sent_at")
  @@index([sent_by], map: "idx_weekly_digests_sent_by")
  @@index([status], map: "idx_weekly_digests_status")
  @@index([digest_type], map: "idx_weekly_digests_type")
  @@index([week_start], map: "idx_weekly_digests_week_start")
}

model hire_approval_requests {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id    String       @db.Uuid
  requested_by      String       @db.Uuid
  requested_at      DateTime     @default(now()) @db.Timestamp(6)
  status            String       @default("pending") @db.VarChar(20)
  reviewed_by       String?      @db.Uuid
  reviewed_at       DateTime?    @db.Timestamp(6)
  previous_status   String       @db.VarChar(50)
  created_at        DateTime     @default(now()) @db.Timestamp(6)
  updated_at        DateTime     @default(now()) @db.Timestamp(6)
  applications      applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_hire_approval_application")
  requested_by_user users        @relation("hire_requests_requested", fields: [requested_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_hire_approval_requested_by")
  reviewed_by_user  users?       @relation("hire_requests_reviewed", fields: [reviewed_by], references: [id], onUpdate: NoAction, map: "fk_hire_approval_reviewed_by")

  @@unique([application_id, status], map: "unique_pending_hire_request")
  @@index([application_id], map: "idx_hire_approval_requests_application_id")
  @@index([requested_by], map: "idx_hire_approval_requests_requested_by")
  @@index([reviewed_by], map: "idx_hire_approval_requests_reviewed_by")
  @@index([status], map: "idx_hire_approval_requests_status")
  @@index([requested_at], map: "idx_hire_approval_requests_requested_at")
}

model application_stage_history {
  id                    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id        String       @db.Uuid
  stage                 String       @db.VarChar(50)
  previous_stage        String?      @db.VarChar(50)
  entered_at            DateTime     @default(now()) @db.Timestamp(6)
  exited_at             DateTime?    @db.Timestamp(6)
  time_in_stage_seconds Int?
  changed_by_user_id    String?      @db.Uuid
  changed_by_name       String?      @db.VarChar(255)
  notes                 String?
  created_at            DateTime     @default(now()) @db.Timestamp(6)
  updated_at            DateTime     @default(now()) @db.Timestamp(6)
  applications          applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                 users?       @relation(fields: [changed_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([application_id], map: "idx_application_stage_history_application_id")
  @@index([entered_at], map: "idx_application_stage_history_entered_at")
  @@index([stage], map: "idx_application_stage_history_stage")
}

model analytics_configurations {
  id                          Int       @id @default(autoincrement())
  property_id                 String    @db.VarChar(255)
  measurement_id              String    @db.VarChar(255)
  service_account_email       String    @db.VarChar(255)
  service_account_private_key String
  connection_status           String?   @default("pending") @db.VarChar(50)
  last_test_at                DateTime? @db.Timestamp(6)
  test_error_message          String?
  created_at                  DateTime? @default(now()) @db.Timestamp(6)
  updated_at                  DateTime? @default(now()) @db.Timestamp(6)

  @@index([connection_status], map: "idx_analytics_config_status")
}

model job_approval_requests {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id            String    @db.Uuid
  requested_by      String    @db.Uuid
  requested_at      DateTime? @default(now()) @db.Timestamp(6)
  status            String?   @default("pending") @db.VarChar(20)
  reviewed_by       String?   @db.Uuid
  reviewed_at       DateTime? @db.Timestamp(6)
  rejection_reason  String?
  notes             String?
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  job               jobs      @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_job_approval_job")
  requested_by_user users     @relation("job_requests_requested", fields: [requested_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_job_approval_requested_by")
  reviewed_by_user  users?    @relation("job_requests_reviewed", fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_job_approval_reviewed_by")

  @@index([job_id], map: "idx_job_approval_requests_job_id")
  @@index([requested_by], map: "idx_job_approval_requests_requested_by")
  @@index([reviewed_by], map: "idx_job_approval_requests_reviewed_by")
  @@index([status], map: "idx_job_approval_requests_status")
  @@index([requested_at], map: "idx_job_approval_requests_requested_at")
}

model job_alert_subscriptions {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String              @db.Uuid
  alert_type        String              @default("weekly_digest") @db.VarChar(20)
  department        String?             @db.VarChar(255)
  keywords          String?
  is_active         Boolean?            @default(true)
  frequency         String?             @default("immediate") @db.VarChar(20)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  user              users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notification_logs notification_logs[]

  @@index([user_id], map: "idx_job_alerts_user_id")
  @@index([alert_type], map: "idx_job_alerts_type")
  @@index([department], map: "idx_job_alerts_department")
  @@index([is_active], map: "idx_job_alerts_active")
  @@index([created_at], map: "idx_job_alerts_created")
}

model notification_logs {
  id                String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String                  @db.Uuid
  job_id            String                  @db.Uuid
  subscription_id   String                  @db.Uuid
  notification_type String                  @db.VarChar(50)
  email_address     String                  @db.VarChar(255)
  sent_at           DateTime?               @default(now()) @db.Timestamp(6)
  batch_id          String?                 @db.Uuid
  job               jobs                    @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notification_logs_job_id")
  subscription      job_alert_subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notification_logs_subscription_id")
  user              users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notification_logs_user_id")

  @@index([user_id], map: "idx_notification_logs_user_id")
  @@index([sent_at], map: "idx_notification_logs_sent_at")
  @@index([notification_type], map: "idx_notification_logs_type")
  @@index([batch_id], map: "idx_notification_logs_batch_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model api_keys {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id            String?                 @db.Uuid
  user_id               String?                 @unique(map: "idx_api_keys_user_id") @db.Uuid
  name                  String                  @db.VarChar(255)
  key_hash              String                  @unique(map: "idx_api_keys_key_hash") @db.VarChar(255)
  key_prefix            String                  @db.VarChar(20)
  permissions           Json                    @default("[]")
  rate_limit            Int                     @default(1000)
  requests_this_month   Int                     @default(0)
  total_requests        Int                     @default(0)
  last_used_at          DateTime?               @db.Timestamp(6)
  is_active             Boolean                 @default(true)
  expires_at            DateTime?               @db.Timestamp(6)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  users                 users?                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  api_usage_logs        api_usage_logs[]
  api_webhook_endpoints api_webhook_endpoints[]

  @@index([is_active], map: "idx_api_keys_active")
  @@index([expires_at], map: "idx_api_keys_expires_at")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model api_usage_logs {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  api_key_id       String?   @db.Uuid
  endpoint         String    @db.VarChar(255)
  method           String    @db.VarChar(10)
  status_code      Int
  response_time_ms Int?
  user_agent       String?
  ip_address       String?   @db.VarChar(45)
  request_size     Int?
  response_size    Int?
  error_message    String?
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  api_keys         api_keys? @relation(fields: [api_key_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([api_key_id], map: "idx_api_usage_logs_api_key_id")
  @@index([created_at], map: "idx_api_usage_logs_created_at")
  @@index([endpoint], map: "idx_api_usage_logs_endpoint")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model api_webhook_endpoints {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  api_key_id           String?   @db.Uuid
  url                  String    @db.VarChar(500)
  events               Json      @default("[]")
  is_active            Boolean   @default(true)
  secret               String?   @db.VarChar(255)
  last_delivery_at     DateTime? @db.Timestamp(6)
  last_delivery_status String?   @db.VarChar(20)
  failure_count        Int       @default(0)
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)
  api_keys             api_keys? @relation(fields: [api_key_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([is_active], map: "idx_api_webhook_endpoints_active")
  @@index([api_key_id], map: "idx_api_webhook_endpoints_api_key_id")
}

model security_events {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_type String   @db.VarChar(50)
  severity   String   @default("low") @db.VarChar(20)
  ip_address String?  @db.Inet
  user_id    String?  @db.Uuid
  user_agent String?
  details    Json     @default("{}")
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      users?   @relation("security_events_user_idTousers", fields: [user_id], references: [id])

  @@index([created_at])
  @@index([event_type])
  @@index([severity])
  @@index([ip_address])
  @@index([user_id])
}

model security_alerts {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  alert_type       String    @db.VarChar(50)
  severity         String    @default("medium") @db.VarChar(20)
  ip_address       String?   @db.Inet
  event_count      Int       @default(1)
  details          Json      @default("{}")
  resolved         Boolean   @default(false)
  resolved_at      DateTime? @db.Timestamp(6)
  resolved_by      String?   @db.Uuid
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  resolved_by_user users?    @relation("security_alerts_resolved_byTousers", fields: [resolved_by], references: [id])

  @@index([created_at])
  @@index([resolved])
  @@index([severity])
}

model background_checks {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id       String       @db.Uuid
  certn_applicant_id   String?      @db.VarChar(255)
  certn_application_id String?      @db.VarChar(255)
  package_type         String       @db.VarChar(50)
  status               String       @default("pending") @db.VarChar(20)
  initiated_at         DateTime     @default(now()) @db.Timestamp(6)
  completed_at         DateTime?    @db.Timestamp(6)
  initiated_by         String       @db.Uuid
  certn_report_url     String?      @db.VarChar(500)
  metadata             Json?
  created_at           DateTime     @default(now()) @db.Timestamp(6)
  updated_at           DateTime     @default(now()) @db.Timestamp(6)
  is_active            Boolean?     @default(true)
  expired_at           DateTime?    @db.Timestamp(6)
  rerun_reason         String?
  applications         applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                users        @relation(fields: [initiated_by], references: [id], onUpdate: NoAction)

  @@index([application_id], map: "idx_background_checks_application_id")
  @@index([status], map: "idx_background_checks_status")
  @@index([initiated_by], map: "idx_background_checks_initiated_by")
  @@index([created_at], map: "idx_background_checks_created_at")
  @@index([certn_application_id], map: "idx_background_checks_certn_application_id")
  @@index([is_active], map: "idx_background_checks_is_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model application_screening_answers {
  id                      String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id          String                  @db.Uuid
  question_id             String                  @db.Uuid
  question_text           String
  answer_text             String?
  answer_json             Json?
  file_url                String?                 @db.VarChar(500)
  file_name               String?                 @db.VarChar(255)
  created_at              DateTime?               @default(now()) @db.Timestamp(6)
  updated_at              DateTime?               @default(now()) @db.Timestamp(6)
  applications            applications            @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  job_screening_questions job_screening_questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([application_id], map: "idx_application_screening_answers_application_id")
  @@index([question_id], map: "idx_application_screening_answers_question_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model job_screening_questions {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id                        String                          @db.Uuid
  question_text                 String
  question_type                 String                          @db.VarChar(50)
  options                       Json?
  is_required                   Boolean?                        @default(false)
  placeholder_text              String?                         @db.VarChar(255)
  help_text                     String?
  sort_order                    Int                             @default(0)
  created_from_template_id      String?                         @db.Uuid
  created_at                    DateTime?                       @default(now()) @db.Timestamp(6)
  updated_at                    DateTime?                       @default(now()) @db.Timestamp(6)
  application_screening_answers application_screening_answers[]
  question_templates            question_templates?             @relation(fields: [created_from_template_id], references: [id], onUpdate: NoAction)
  jobs                          jobs                            @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([job_id], map: "idx_job_screening_questions_job_id")
  @@index([job_id, sort_order], map: "idx_job_screening_questions_sort_order")
  @@index([created_from_template_id], map: "idx_job_screening_questions_template_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model question_templates {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                   String                    @db.VarChar(255)
  question_text           String
  question_type           String                    @db.VarChar(50)
  options                 Json?
  is_required             Boolean?                  @default(false)
  placeholder_text        String?                   @db.VarChar(255)
  help_text               String?
  created_by              String?                   @db.Uuid
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  usage_count             Int?                      @default(0)
  last_used_at            DateTime?                 @db.Timestamp(6)
  is_active               Boolean?                  @default(true)
  job_screening_questions job_screening_questions[]
  users                   users?                    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_question_templates_created_by")
  @@index([is_active], map: "idx_question_templates_is_active")
  @@index([question_type], map: "idx_question_templates_question_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model job_invitations {
  id                                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id                                    String    @db.Uuid
  candidate_id                              String    @db.Uuid
  invited_by                                String    @db.Uuid
  invitation_token                          String    @unique @db.VarChar(255)
  status                                    String?   @default("sent") @db.VarChar(20)
  message                                   String?
  sent_at                                   DateTime? @default(now()) @db.Timestamp(6)
  viewed_at                                 DateTime? @db.Timestamp(6)
  responded_at                              DateTime? @db.Timestamp(6)
  expires_at                                DateTime  @db.Timestamp(6)
  created_at                                DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                DateTime? @default(now()) @db.Timestamp(6)
  users_job_invitations_candidate_idTousers users     @relation("job_invitations_candidate_idTousers", fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_job_invitations_invited_byTousers   users     @relation("job_invitations_invited_byTousers", fields: [invited_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  jobs                                      jobs      @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([candidate_id], map: "idx_job_invitations_candidate")
  @@index([invited_by], map: "idx_job_invitations_invited_by")
  @@index([job_id], map: "idx_job_invitations_job")
  @@index([status], map: "idx_job_invitations_status")
  @@index([invitation_token], map: "idx_job_invitations_token")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model talent_pool_interactions {
  id                                                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  admin_id                                           String    @db.Uuid
  candidate_id                                       String    @db.Uuid
  job_id                                             String?   @db.Uuid
  interaction_type                                   String    @db.VarChar(50)
  notes                                              String?
  metadata                                           Json?
  created_at                                         DateTime? @default(now()) @db.Timestamp(6)
  users_talent_pool_interactions_admin_idTousers     users     @relation("talent_pool_interactions_admin_idTousers", fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_talent_pool_interactions_candidate_idTousers users     @relation("talent_pool_interactions_candidate_idTousers", fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  jobs                                               jobs?     @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([admin_id], map: "idx_talent_pool_interactions_admin")
  @@index([candidate_id], map: "idx_talent_pool_interactions_candidate")
  @@index([created_at], map: "idx_talent_pool_interactions_created_at")
  @@index([job_id], map: "idx_talent_pool_interactions_job")
  @@index([interaction_type], map: "idx_talent_pool_interactions_type")
}
