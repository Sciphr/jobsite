generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model application_notes {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id      String   @db.Uuid
  content             String
  type                String   @default("note") @db.VarChar(50)
  author_id           String?  @db.Uuid
  author_name         String?  @db.VarChar(255)
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  metadata            Json?
  is_system_generated Boolean? @default(false)
}

model applications {
  id                                    String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                                String                          @default("Applied")
  coverLetter                           String?
  resumeUrl                             String?
  notes                                 String?
  appliedAt                             DateTime                        @default(now())
  updatedAt                             DateTime
  userId                                String?                         @db.Uuid
  jobId                                 String                          @db.Uuid
  name                                  String?
  email                                 String?
  phone                                 String?
  is_archived                           Boolean?                        @default(false)
  archived_at                           DateTime?                       @db.Timestamp(6)
  archived_by                           String?                         @db.Uuid
  archive_reason                        String?                         @db.VarChar(100)
  current_stage_entered_at              DateTime?                       @db.Timestamp(6)
  time_in_current_stage_seconds         Int?                            @default(0)
  total_application_time_seconds        Int?                            @default(0)
  application_stage_history             application_stage_history[]
  jobs                                  jobs                            @relation(fields: [jobId], references: [id])
  users                                 users?                          @relation(fields: [userId], references: [id])
  users_applications_archived_byTousers users?                          @relation("applications_archived_byTousers", fields: [archived_by], references: [id], onUpdate: NoAction, map: "fk_applications_archived_by")
  audit_logs                            audit_logs[]
  emails                                emails[]
  hire_approval_requests                hire_approval_requests[]
  interview_reschedule_requests         interview_reschedule_requests[]
  interview_tokens                      interview_tokens[]
  interviews                            interviews[]

  @@unique([userId, jobId])
  @@index([is_archived, status], map: "idx_applications_archived_status")
  @@index([is_archived], map: "idx_applications_is_archived")
}

model audit_logs {
  id                                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_type                              String        @db.VarChar(100)
  category                                String        @db.VarChar(50)
  subcategory                             String?       @db.VarChar(50)
  entity_type                             String?       @db.VarChar(50)
  entity_id                               String?       @db.Uuid
  entity_name                             String?       @db.VarChar(255)
  actor_id                                String?       @db.Uuid
  actor_type                              String        @default("user") @db.VarChar(20)
  actor_name                              String?       @db.VarChar(255)
  action                                  String        @db.VarChar(255)
  description                             String?
  old_values                              Json?
  new_values                              Json?
  changes                                 Json?
  ip_address                              String?       @db.VarChar(45)
  user_agent                              String?       @db.VarChar(500)
  session_id                              String?       @db.VarChar(255)
  request_id                              String?       @db.VarChar(255)
  related_user_id                         String?       @db.Uuid
  related_job_id                          String?       @db.Uuid
  related_application_id                  String?       @db.Uuid
  created_at                              DateTime      @default(now()) @db.Timestamp(6)
  severity                                String        @default("info") @db.VarChar(20)
  status                                  String        @default("success") @db.VarChar(20)
  tags                                    String[]      @default([])
  metadata                                Json?
  users_audit_logs_actor_idTousers        users?        @relation("audit_logs_actor_idTousers", fields: [actor_id], references: [id], onUpdate: NoAction, map: "fk_audit_logs_actor")
  applications                            applications? @relation(fields: [related_application_id], references: [id], onUpdate: NoAction, map: "fk_audit_logs_related_application")
  jobs                                    jobs?         @relation(fields: [related_job_id], references: [id], onUpdate: NoAction, map: "fk_audit_logs_related_job")
  users_audit_logs_related_user_idTousers users?        @relation("audit_logs_related_user_idTousers", fields: [related_user_id], references: [id], onUpdate: NoAction, map: "fk_audit_logs_related_user")

  @@index([actor_id], map: "idx_audit_logs_actor")
  @@index([category, created_at], map: "idx_audit_logs_category_date")
  @@index([created_at], map: "idx_audit_logs_created_at")
  @@index([entity_type, entity_id], map: "idx_audit_logs_entity")
  @@index([entity_type, entity_id, created_at], map: "idx_audit_logs_entity_timeline")
  @@index([related_application_id], map: "idx_audit_logs_related_application")
  @@index([related_job_id], map: "idx_audit_logs_related_job")
  @@index([related_user_id], map: "idx_audit_logs_related_user")
}

model categories {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @unique
  description String?
  jobs        jobs[]
}

model communication_settings {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String    @unique @db.VarChar(255)
  value       String
  category    String    @db.VarChar(100)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
}

model email_automation_rules {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String    @db.VarChar(255)
  trigger        String    @db.VarChar(100)
  conditions     String
  template_id    String    @db.Uuid
  is_active      Boolean?  @default(true)
  created_by     String    @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  recipient_type String?   @default("applicant") @db.VarChar(50)
  users          users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model email_campaigns {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String    @db.VarChar(255)
  subject          String
  content          String
  job_id           String?   @db.Uuid
  status           String?   @db.VarChar(50)
  filters          String?
  total_recipients Int?      @default(0)
  successful_sends Int?      @default(0)
  failed_sends     Int?      @default(0)
  created_by       String    @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  sent_at          DateTime? @db.Timestamp(6)
  users            users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobs             jobs?     @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emails           emails[]

  @@index([created_by], map: "idx_email_campaigns_created_by")
  @@index([job_id], map: "idx_email_campaigns_job_id")
}

model email_templates {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @db.VarChar(255)
  subject      String
  content      String
  type         String    @db.VarChar(100)
  is_default   Boolean?  @default(false)
  is_active    Boolean?  @default(true)
  variables    String?
  description  String?
  created_by   String?   @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  category     String?   @db.VarChar(50)
  tags         String[]
  usage_count  Int?      @default(0)
  last_used_at DateTime? @db.Timestamp(6)
  users        users?    @relation(fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_email_templates_created_by")

  @@index([is_active], map: "idx_email_templates_is_active")
  @@index([type], map: "idx_email_templates_type")
}

model emails {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject         String
  content         String
  html_content    String?
  recipient_email String           @db.VarChar(255)
  recipient_name  String?          @db.VarChar(255)
  application_id  String?          @db.Uuid
  job_id          String?          @db.Uuid
  template_id     String?          @db.Uuid
  email_provider  String?          @db.VarChar(100)
  message_id      String?          @db.VarChar(255)
  status          String?          @default("pending") @db.VarChar(50)
  failure_reason  String?
  opened_at       DateTime?        @db.Timestamp(6)
  clicked_at      DateTime?        @db.Timestamp(6)
  replied_at      DateTime?        @db.Timestamp(6)
  sent_by         String           @db.Uuid
  sent_at         DateTime?        @default(now()) @db.Timestamp(6)
  campaign_id     String?          @db.Uuid
  applications    applications?    @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  email_campaigns email_campaigns? @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobs            jobs?            @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users            @relation(fields: [sent_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([application_id], map: "idx_emails_application_id")
  @@index([job_id], map: "idx_emails_job_id")
  @@index([sent_at], map: "idx_emails_sent_at")
  @@index([sent_by], map: "idx_emails_sent_by")
  @@index([status], map: "idx_emails_status")
  @@index([template_id], map: "idx_emails_template_id")
}

model interview_reschedule_requests {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  interview_token_id String           @db.Uuid
  application_id     String           @db.Uuid
  response_type      String           @db.VarChar(50)
  alternative_times  Json?            @db.Json
  written_response   String?
  status             String           @default("pending") @db.VarChar(50)
  submitted_at       DateTime         @db.Timestamp(6)
  reviewed_at        DateTime?        @db.Timestamp(6)
  reviewed_by        String?          @db.Uuid
  review_notes       String?
  created_at         DateTime         @default(now()) @db.Timestamp(6)
  updated_at         DateTime         @default(now()) @db.Timestamp(6)
  applications       applications     @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_interview_reschedule_requests_application")
  users              users?           @relation(fields: [reviewed_by], references: [id], onUpdate: NoAction, map: "fk_interview_reschedule_requests_reviewer")
  interview_tokens   interview_tokens @relation(fields: [interview_token_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_interview_reschedule_requests_token")

  @@index([application_id], map: "idx_interview_reschedule_requests_application_id")
  @@index([status], map: "idx_interview_reschedule_requests_status")
  @@index([submitted_at], map: "idx_interview_reschedule_requests_submitted_at")
  @@index([interview_token_id], map: "idx_interview_reschedule_requests_token_id")
}

model interview_tokens {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id                String                          @db.Uuid
  reschedule_token              String                          @unique @db.VarChar(255)
  acceptance_token              String                          @unique @db.VarChar(255)
  scheduled_at                  DateTime                        @db.Timestamp(6)
  duration                      Int                             @default(45)
  type                          String                          @db.VarChar(50)
  interviewers                  Json?                           @db.Json
  location                      String?
  agenda                        String?
  notes                         String?
  calendar_event_id             String?                         @db.VarChar(255)
  status                        String                          @default("pending") @db.VarChar(50)
  responded_at                  DateTime?                       @db.Timestamp(6)
  expires_at                    DateTime                        @db.Timestamp(6)
  created_at                    DateTime                        @default(now()) @db.Timestamp(6)
  updated_at                    DateTime                        @default(now()) @db.Timestamp(6)
  meeting_link                  String?                         @db.VarChar(500)
  meeting_provider              String?                         @default("google") @db.VarChar(50)
  is_completed                  Boolean?                        @default(false)
  completed_at                  DateTime?                       @db.Timestamp(6)
  interview_notes               String?
  interview_rating              Int?
  last_reminder_sent_at         DateTime?                       @db.Timestamp(6)
  interview_reschedule_requests interview_reschedule_requests[]
  applications                  applications                    @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_interview_tokens_application")

  @@index([acceptance_token], map: "idx_interview_tokens_acceptance_token")
  @@index([application_id], map: "idx_interview_tokens_application_id")
  @@index([expires_at], map: "idx_interview_tokens_expires_at")
  @@index([reschedule_token], map: "idx_interview_tokens_reschedule_token")
  @@index([status], map: "idx_interview_tokens_status")
  @@index([completed_at], map: "idx_interview_tokens_completed_at")
  @@index([is_completed], map: "idx_interview_tokens_is_completed")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model interviews {
  id                                     String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id                         String       @db.Uuid
  interviewer_id                         String       @db.Uuid
  job_id                                 String       @db.Uuid
  type                                   String       @db.VarChar(20)
  status                                 String       @default("scheduled") @db.VarChar(20)
  duration_minutes                       Int          @default(45)
  proposed_time_slots                    Json?
  scheduled_at                           DateTime?    @db.Timestamp(6)
  confirmed_at                           DateTime?    @db.Timestamp(6)
  timezone                               String       @default("America/Toronto") @db.VarChar(100)
  meeting_link                           String?
  meeting_location                       String?
  agenda                                 String?
  notes                                  String?
  additional_interviewers                Json?
  google_calendar_event_id               String?      @db.VarChar(255)
  calendar_event_created                 Boolean?     @default(false)
  invitation_sent_at                     DateTime?    @db.Timestamp(6)
  reminder_sent_at                       DateTime?    @db.Timestamp(6)
  created_at                             DateTime?    @default(now()) @db.Timestamp(6)
  updated_at                             DateTime?    @default(now()) @db.Timestamp(6)
  created_by                             String?      @db.Uuid
  applications                           applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_interviews_created_byTousers     users?       @relation("interviews_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_interviews_interviewer_idTousers users        @relation("interviews_interviewer_idTousers", fields: [interviewer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  jobs                                   jobs         @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([application_id], map: "idx_interviews_application_id")
  @@index([created_at], map: "idx_interviews_created_at")
  @@index([interviewer_id], map: "idx_interviews_interviewer_id")
  @@index([job_id], map: "idx_interviews_job_id")
  @@index([scheduled_at], map: "idx_interviews_scheduled_at")
  @@index([status], map: "idx_interviews_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model jobs {
  id                      String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                   String
  slug                    String                  @unique
  description             String
  summary                 String?
  department              String
  employmentType          String
  experienceLevel         String
  location                String
  remotePolicy            String
  salaryMin               Int?
  salaryMax               Int?
  salaryCurrency          String                  @default("USD")
  salaryType              String                  @default("Annual")
  benefits                String?
  requirements            String
  preferredQualifications String?
  educationRequired       String?
  yearsExperienceRequired Int?
  applicationDeadline     DateTime?
  startDate               DateTime?
  applicationInstructions String?
  status                  String                  @default("Draft")
  featured                Boolean                 @default(false)
  priority                Int                     @default(0)
  viewCount               Int                     @default(0)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime
  postedAt                DateTime?
  categoryId              String                  @db.Uuid
  createdBy               String?                 @db.Uuid
  autoExpiresAt           DateTime?
  lastExpiredCheck        DateTime?
  showSalary              Boolean                 @default(true)
  auto_expires_at         DateTime?               @db.Timestamp(6)
  last_expired_check      DateTime?               @db.Timestamp(6)
  applicationCount        Int?                    @default(0)
  applications            applications[]
  audit_logs              audit_logs[]
  email_campaigns         email_campaigns[]
  emails                  emails[]
  interviews              interviews[]
  job_approval_requests   job_approval_requests[]
  categories              categories              @relation(fields: [categoryId], references: [id])
  users                   users?                  @relation(fields: [createdBy], references: [id])
  saved_jobs              saved_jobs[]
}

model permissions {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resource             String             @db.VarChar(50)
  action               String             @db.VarChar(50)
  description          String
  category             String             @db.VarChar(50)
  is_system_permission Boolean?           @default(true)
  created_at           DateTime?          @default(now()) @db.Timestamptz(6)
  role_permissions     role_permissions[]

  @@unique([resource, action])
  @@index([resource, action], map: "idx_permissions_resource_action")
}

model role_permissions {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id       String      @db.Uuid
  permission_id String      @db.Uuid
  granted_at    DateTime?   @default(now()) @db.Timestamptz(6)
  granted_by    String?     @db.Uuid
  users         users?      @relation(fields: [granted_by], references: [id], onUpdate: NoAction)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([role_id, permission_id])
  @@index([permission_id], map: "idx_role_permissions_permission_id")
  @@index([role_id], map: "idx_role_permissions_role_id")
}

model roles {
  id                            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                          String             @unique @db.VarChar(100)
  description                   String?
  color                         String?            @default("#6b7280") @db.VarChar(7)
  is_system_role                Boolean?           @default(false)
  is_active                     Boolean?           @default(true)
  created_at                    DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?          @default(now()) @db.Timestamptz(6)
  created_by                    String?            @db.Uuid
  role_permissions              role_permissions[]
  users_roles_created_byTousers users?             @relation("roles_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction)
  user_roles                    user_roles[]

  @@index([is_active], map: "idx_roles_active")
}

model saved_jobs {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  savedAt DateTime @default(now())
  userId  String   @db.Uuid
  jobId   String   @db.Uuid
  jobs    jobs     @relation(fields: [jobId], references: [id])
  users   users    @relation(fields: [userId], references: [id])

  @@unique([userId, jobId])
}

model settings {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key            String
  value          String
  category       String
  userId         String?  @db.Uuid
  privilegeLevel Int      @default(0)
  dataType       String   @default("string")
  description    String?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @db.Timestamptz(6)
  users          users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([key, userId])
}

model user_resumes {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String   @db.Uuid
  file_name    String   @db.VarChar(255)
  file_size    Int
  file_type    String   @db.VarChar(50)
  storage_path String   @db.VarChar(500)
  is_default   Boolean  @default(false)
  uploaded_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, is_default], map: "idx_user_resumes_default")
  @@index([user_id], map: "idx_user_resumes_user_id")
}

model users {
  id                                           String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                        String                          @unique
  password                                     String?
  firstName                                    String?
  lastName                                     String?
  phone                                        String?
  createdAt                                    DateTime                        @default(now())
  updatedAt                                    DateTime
  role                                         String?                         @default("user") @db.VarChar
  privilegeLevel                               Int?                            @default(0)
  isActive                                     Boolean?                        @default(true)
  is_active                                    Boolean?                        @default(true)
  google_access_token                          String?
  google_refresh_token                         String?
  google_token_expires_at                      DateTime?                       @db.Timestamp(6)
  google_calendar_id                           String?                         @default("primary") @db.VarChar(255)
  google_email                                 String?                         @db.VarChar(255)
  calendar_integration_enabled                 Boolean?                        @default(false)
  calendar_integration_connected_at            DateTime?                       @db.Timestamp(6)
  calendar_timezone                            String?                         @default("America/Toronto") @db.VarChar(100)
  zoom_access_token                            String?                         @db.VarChar(500)
  zoom_refresh_token                           String?                         @db.VarChar(500)
  zoom_token_expires_at                        DateTime?                       @db.Timestamp(6)
  zoom_user_id                                 String?                         @db.VarChar(255)
  zoom_email                                   String?                         @db.VarChar(255)
  zoom_integration_enabled                     Boolean?                        @default(false)
  zoom_integration_connected_at                DateTime?                       @db.Timestamp(6)
  microsoft_access_token                       String?
  microsoft_refresh_token                      String?
  microsoft_token_expires_at                   DateTime?                       @db.Timestamp(6)
  microsoft_user_id                            String?                         @db.VarChar(255)
  microsoft_email                              String?                         @db.VarChar(255)
  microsoft_tenant_id                          String?                         @db.VarChar(255)
  microsoft_integration_enabled                Boolean?                        @default(false)
  microsoft_integration_connected_at           DateTime?                       @db.Timestamp(6)
  application_stage_history                    application_stage_history[]
  applications                                 applications[]
  applications_applications_archived_byTousers applications[]                  @relation("applications_archived_byTousers")
  audit_logs_audit_logs_actor_idTousers        audit_logs[]                    @relation("audit_logs_actor_idTousers")
  audit_logs_audit_logs_related_user_idTousers audit_logs[]                    @relation("audit_logs_related_user_idTousers")
  email_automation_rules                       email_automation_rules[]
  email_campaigns                              email_campaigns[]
  email_templates                              email_templates[]
  emails                                       emails[]
  hire_approval_requests_requested             hire_approval_requests[]        @relation("hire_requests_requested")
  hire_approval_requests_reviewed              hire_approval_requests[]        @relation("hire_requests_reviewed")
  interview_reschedule_requests                interview_reschedule_requests[]
  interviews_interviews_created_byTousers      interviews[]                    @relation("interviews_created_byTousers")
  interviews_interviews_interviewer_idTousers  interviews[]                    @relation("interviews_interviewer_idTousers")
  job_approval_requests_requested              job_approval_requests[]         @relation("job_requests_requested")
  job_approval_requests_reviewed               job_approval_requests[]         @relation("job_requests_reviewed")
  jobs                                         jobs[]
  role_permissions                             role_permissions[]
  roles_roles_created_byTousers                roles[]                         @relation("roles_created_byTousers")
  saved_jobs                                   saved_jobs[]
  settings                                     settings[]
  user_resumes                                 user_resumes[]
  user_roles                                   user_roles[]
  weekly_digests                               weekly_digests[]
}

model user_roles {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  role_id     String    @db.Uuid
  assigned_at DateTime? @default(now()) @db.Timestamptz(6)
  assigned_by String?   @db.Uuid
  is_active   Boolean?  @default(true)
  roles       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_roles_role_id")
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_roles_user_id")

  @@unique([user_id, role_id], map: "unique_user_role")
  @@index([user_id], map: "idx_user_roles_user_id")
  @@index([role_id], map: "idx_user_roles_role_id")
  @@index([is_active], map: "idx_user_roles_active")
}

model weekly_digests {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  week_start        DateTime @db.Timestamp(6)
  week_end          DateTime @db.Timestamp(6)
  digest_type       String   @default("scheduled") @db.VarChar(20)
  recipient_count   Int
  successful_sends  Int
  failed_sends      Int
  sent_at           DateTime @db.Timestamp(6)
  sent_by           String   @db.Uuid
  theme             String?  @db.VarChar(50)
  sections_included Json?    @db.Json
  configuration     Json?    @db.Json
  date_range        String?  @db.VarChar(100)
  status            String   @default("completed") @db.VarChar(20)
  error_message     String?
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  users             users    @relation(fields: [sent_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_weekly_digests_sent_by")

  @@index([sent_at], map: "idx_weekly_digests_sent_at")
  @@index([sent_by], map: "idx_weekly_digests_sent_by")
  @@index([status], map: "idx_weekly_digests_status")
  @@index([digest_type], map: "idx_weekly_digests_type")
  @@index([week_start], map: "idx_weekly_digests_week_start")
}

model hire_approval_requests {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id    String       @db.Uuid
  requested_by      String       @db.Uuid
  requested_at      DateTime     @default(now()) @db.Timestamp(6)
  status            String       @default("pending") @db.VarChar(20)
  reviewed_by       String?      @db.Uuid
  reviewed_at       DateTime?    @db.Timestamp(6)
  previous_status   String       @db.VarChar(50)
  created_at        DateTime     @default(now()) @db.Timestamp(6)
  updated_at        DateTime     @default(now()) @db.Timestamp(6)
  applications      applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_hire_approval_application")
  requested_by_user users        @relation("hire_requests_requested", fields: [requested_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_hire_approval_requested_by")
  reviewed_by_user  users?       @relation("hire_requests_reviewed", fields: [reviewed_by], references: [id], onUpdate: NoAction, map: "fk_hire_approval_reviewed_by")

  @@unique([application_id, status], map: "unique_pending_hire_request")
  @@index([application_id], map: "idx_hire_approval_requests_application_id")
  @@index([requested_by], map: "idx_hire_approval_requests_requested_by")
  @@index([reviewed_by], map: "idx_hire_approval_requests_reviewed_by")
  @@index([status], map: "idx_hire_approval_requests_status")
  @@index([requested_at], map: "idx_hire_approval_requests_requested_at")
}

model application_stage_history {
  id                    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id        String       @db.Uuid
  stage                 String       @db.VarChar(50)
  previous_stage        String?      @db.VarChar(50)
  entered_at            DateTime     @default(now()) @db.Timestamp(6)
  exited_at             DateTime?    @db.Timestamp(6)
  time_in_stage_seconds Int?
  changed_by_user_id    String?      @db.Uuid
  changed_by_name       String?      @db.VarChar(255)
  notes                 String?
  created_at            DateTime     @default(now()) @db.Timestamp(6)
  updated_at            DateTime     @default(now()) @db.Timestamp(6)
  applications          applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                 users?       @relation(fields: [changed_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([application_id], map: "idx_application_stage_history_application_id")
  @@index([entered_at], map: "idx_application_stage_history_entered_at")
  @@index([stage], map: "idx_application_stage_history_stage")
}

model analytics_configurations {
  id                          Int       @id @default(autoincrement())
  property_id                 String    @db.VarChar(255)
  measurement_id              String    @db.VarChar(255)
  service_account_email       String    @db.VarChar(255)
  service_account_private_key String
  connection_status           String?   @default("pending") @db.VarChar(50)
  last_test_at                DateTime? @db.Timestamp(6)
  test_error_message          String?
  created_at                  DateTime? @default(now()) @db.Timestamp(6)
  updated_at                  DateTime? @default(now()) @db.Timestamp(6)

  @@index([connection_status], map: "idx_analytics_config_status")
}

model job_approval_requests {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id            String    @db.Uuid
  requested_by      String    @db.Uuid
  requested_at      DateTime? @default(now()) @db.Timestamp(6)
  status            String?   @default("pending") @db.VarChar(20)
  reviewed_by       String?   @db.Uuid
  reviewed_at       DateTime? @db.Timestamp(6)
  rejection_reason  String?
  notes             String?
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  job               jobs      @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_job_approval_job")
  requested_by_user users     @relation("job_requests_requested", fields: [requested_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_job_approval_requested_by")
  reviewed_by_user  users?    @relation("job_requests_reviewed", fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_job_approval_reviewed_by")

  @@index([job_id], map: "idx_job_approval_requests_job_id")
  @@index([requested_by], map: "idx_job_approval_requests_requested_by")
  @@index([reviewed_by], map: "idx_job_approval_requests_reviewed_by")
  @@index([status], map: "idx_job_approval_requests_status")
  @@index([requested_at], map: "idx_job_approval_requests_requested_at")
}
